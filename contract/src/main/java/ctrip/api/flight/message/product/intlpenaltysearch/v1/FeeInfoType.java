/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.message.product.intlpenaltysearch.v1;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import ctrip.api.flight.data.flighttypes.v2.*;
import ctrip.api.flight.data.flighttypes.v2.CurrencyInfoType;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FeeInfoType", propOrder = {
    "fee",
    "currencyInfo"
})
@SuppressWarnings("all")
public class FeeInfoType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"FeeInfoType\",\"namespace\":\"" + FeeInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"fee\",\"type\":[\"string\",\"null\"]},{\"name\":\"currencyInfo\",\"type\":{\"type\":\"record\",\"name\":\"CurrencyInfoType\",\"namespace\":\"" + CurrencyInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"currency\",\"type\":[\"string\",\"null\"]},{\"name\":\"exchangeRate\",\"type\":[\"string\",\"null\"]}]}}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public FeeInfoType(
        BigDecimal fee, 
        CurrencyInfoType currencyInfo) {
        this.fee = fee;
        this.currencyInfo = currencyInfo;
    }

    public FeeInfoType() {
    }

    @FieldDoc("费用")
    @JsonProperty("Fee")
    @XmlElement(name = "Fee")
    private BigDecimal fee;

    @FieldDoc("费用的币种信息")
    @JsonProperty("CurrencyInfo")
    @XmlElement(name = "CurrencyInfo")
    private CurrencyInfoType currencyInfo;

    /**
     * 费用
     */
    public BigDecimal getFee() {
        return this.fee;
    }

    public void setFee(BigDecimal fee) {
        this.fee = fee;
    }

    /**
     * 费用的币种信息
     */
    public CurrencyInfoType getCurrencyInfo() {
        return this.currencyInfo;
    }

    public void setCurrencyInfo(CurrencyInfoType currencyInfo) {
        this.currencyInfo = currencyInfo;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return TypeConverter.convert(this.fee, String.class);
            case 1: return (CurrencyInfoType) this.currencyInfo;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.fee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 1: this.currencyInfo = (CurrencyInfoType)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final FeeInfoType other = (FeeInfoType)obj;
        return
            Objects.equal(this.fee, other.fee) && 
            Objects.equal(this.currencyInfo, other.currencyInfo);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.fee);
        result = 31 * result + Objects.hashCode(this.currencyInfo);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("fee", fee)
            .add("currencyInfo", currencyInfo)
            .toString();
    }
}