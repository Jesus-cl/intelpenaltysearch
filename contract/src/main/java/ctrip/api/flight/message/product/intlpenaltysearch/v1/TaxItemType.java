/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.message.product.intlpenaltysearch.v1;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TaxItemType", propOrder = {
    "taxItemName",
    "taxItemAmount"
})
@SuppressWarnings("all")
public class TaxItemType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"TaxItemType\",\"namespace\":\"" + TaxItemType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"taxItemName\",\"type\":[\"string\",\"null\"]},{\"name\":\"taxItemAmount\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public TaxItemType(
        String taxItemName, 
        BigDecimal taxItemAmount) {
        this.taxItemName = taxItemName;
        this.taxItemAmount = taxItemAmount;
    }

    public TaxItemType() {
    }

    @JsonProperty("TaxItemName")
    @XmlElement(name = "TaxItemName")
    private String taxItemName;

    @JsonProperty("TaxItemAmount")
    @XmlElement(name = "TaxItemAmount")
    private BigDecimal taxItemAmount;

    public String getTaxItemName() {
        return this.taxItemName;
    }

    public void setTaxItemName(String taxItemName) {
        this.taxItemName = taxItemName;
    }

    public BigDecimal getTaxItemAmount() {
        return this.taxItemAmount;
    }

    public void setTaxItemAmount(BigDecimal taxItemAmount) {
        this.taxItemAmount = taxItemAmount;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.taxItemName;
            case 1: return TypeConverter.convert(this.taxItemAmount, String.class);
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.taxItemName = (String)fieldValue; break;
            case 1: this.taxItemAmount = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final TaxItemType other = (TaxItemType)obj;
        return
            Objects.equal(this.taxItemName, other.taxItemName) && 
            Objects.equal(this.taxItemAmount, other.taxItemAmount);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.taxItemName);
        result = 31 * result + Objects.hashCode(this.taxItemAmount);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("taxItemName", taxItemName)
            .add("taxItemAmount", taxItemAmount)
            .toString();
    }
}