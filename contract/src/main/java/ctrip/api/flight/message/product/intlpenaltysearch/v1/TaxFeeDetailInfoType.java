/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.message.product.intlpenaltysearch.v1;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TaxFeeDetailInfoType", propOrder = {
    "passengerType",
    "fuelDetailTypeRMB",
    "fuelDetailTypeForeign",
    "taxDetailTypeRMB",
    "taxDetailTypeForeign"
})
@SuppressWarnings("all")
public class TaxFeeDetailInfoType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"TaxFeeDetailInfoType\",\"namespace\":\"" + TaxFeeDetailInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"passengerType\",\"type\":[\"string\",\"null\"]},{\"name\":\"fuelDetailTypeRMB\",\"type\":{\"type\":\"record\",\"name\":\"TaxDetailType\",\"namespace\":\"" + TaxDetailType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"totalAmount\",\"type\":[\"string\",\"null\"]},{\"name\":\"currencyType\",\"type\":[\"string\",\"null\"]},{\"name\":\"taxItemList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TaxItemType\",\"namespace\":\"" + TaxItemType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"taxItemName\",\"type\":[\"string\",\"null\"]},{\"name\":\"taxItemAmount\",\"type\":[\"string\",\"null\"]}]}}}]}},{\"name\":\"fuelDetailTypeForeign\",\"type\":\"TaxDetailType\"},{\"name\":\"taxDetailTypeRMB\",\"type\":\"TaxDetailType\"},{\"name\":\"taxDetailTypeForeign\",\"type\":\"TaxDetailType\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public TaxFeeDetailInfoType(
        String passengerType, 
        TaxDetailType fuelDetailTypeRMB, 
        TaxDetailType fuelDetailTypeForeign, 
        TaxDetailType taxDetailTypeRMB, 
        TaxDetailType taxDetailTypeForeign) {
        this.passengerType = passengerType;
        this.fuelDetailTypeRMB = fuelDetailTypeRMB;
        this.fuelDetailTypeForeign = fuelDetailTypeForeign;
        this.taxDetailTypeRMB = taxDetailTypeRMB;
        this.taxDetailTypeForeign = taxDetailTypeForeign;
    }

    public TaxFeeDetailInfoType() {
    }

    @JsonProperty("PassengerType")
    @XmlElement(name = "PassengerType")
    private String passengerType;

    @JsonProperty("FuelDetailTypeRMB")
    @XmlElement(name = "FuelDetailTypeRMB")
    private TaxDetailType fuelDetailTypeRMB;

    @JsonProperty("FuelDetailTypeForeign")
    @XmlElement(name = "FuelDetailTypeForeign")
    private TaxDetailType fuelDetailTypeForeign;

    @JsonProperty("TaxDetailTypeRMB")
    @XmlElement(name = "TaxDetailTypeRMB")
    private TaxDetailType taxDetailTypeRMB;

    @JsonProperty("TaxDetailTypeForeign")
    @XmlElement(name = "TaxDetailTypeForeign")
    private TaxDetailType taxDetailTypeForeign;

    public String getPassengerType() {
        return this.passengerType;
    }

    public void setPassengerType(String passengerType) {
        this.passengerType = passengerType;
    }

    public TaxDetailType getFuelDetailTypeRMB() {
        return this.fuelDetailTypeRMB;
    }

    public void setFuelDetailTypeRMB(TaxDetailType fuelDetailTypeRMB) {
        this.fuelDetailTypeRMB = fuelDetailTypeRMB;
    }

    public TaxDetailType getFuelDetailTypeForeign() {
        return this.fuelDetailTypeForeign;
    }

    public void setFuelDetailTypeForeign(TaxDetailType fuelDetailTypeForeign) {
        this.fuelDetailTypeForeign = fuelDetailTypeForeign;
    }

    public TaxDetailType getTaxDetailTypeRMB() {
        return this.taxDetailTypeRMB;
    }

    public void setTaxDetailTypeRMB(TaxDetailType taxDetailTypeRMB) {
        this.taxDetailTypeRMB = taxDetailTypeRMB;
    }

    public TaxDetailType getTaxDetailTypeForeign() {
        return this.taxDetailTypeForeign;
    }

    public void setTaxDetailTypeForeign(TaxDetailType taxDetailTypeForeign) {
        this.taxDetailTypeForeign = taxDetailTypeForeign;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.passengerType;
            case 1: return (TaxDetailType) this.fuelDetailTypeRMB;
            case 2: return (TaxDetailType) this.fuelDetailTypeForeign;
            case 3: return (TaxDetailType) this.taxDetailTypeRMB;
            case 4: return (TaxDetailType) this.taxDetailTypeForeign;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.passengerType = (String)fieldValue; break;
            case 1: this.fuelDetailTypeRMB = (TaxDetailType)fieldValue; break;
            case 2: this.fuelDetailTypeForeign = (TaxDetailType)fieldValue; break;
            case 3: this.taxDetailTypeRMB = (TaxDetailType)fieldValue; break;
            case 4: this.taxDetailTypeForeign = (TaxDetailType)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final TaxFeeDetailInfoType other = (TaxFeeDetailInfoType)obj;
        return
            Objects.equal(this.passengerType, other.passengerType) && 
            Objects.equal(this.fuelDetailTypeRMB, other.fuelDetailTypeRMB) && 
            Objects.equal(this.fuelDetailTypeForeign, other.fuelDetailTypeForeign) && 
            Objects.equal(this.taxDetailTypeRMB, other.taxDetailTypeRMB) && 
            Objects.equal(this.taxDetailTypeForeign, other.taxDetailTypeForeign);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.passengerType);
        result = 31 * result + Objects.hashCode(this.fuelDetailTypeRMB);
        result = 31 * result + Objects.hashCode(this.fuelDetailTypeForeign);
        result = 31 * result + Objects.hashCode(this.taxDetailTypeRMB);
        result = 31 * result + Objects.hashCode(this.taxDetailTypeForeign);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("passengerType", passengerType)
            .add("fuelDetailTypeRMB", fuelDetailTypeRMB)
            .add("fuelDetailTypeForeign", fuelDetailTypeForeign)
            .add("taxDetailTypeRMB", taxDetailTypeRMB)
            .add("taxDetailTypeForeign", taxDetailTypeForeign)
            .toString();
    }
}