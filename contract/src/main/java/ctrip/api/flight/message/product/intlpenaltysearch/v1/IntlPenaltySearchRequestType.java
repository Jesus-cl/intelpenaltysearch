/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.message.product.intlpenaltysearch.v1;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import ctrip.api.flight.data.messagetypes.v2.*;
import ctrip.api.flight.data.messagetypes.v2.RequestHeaderType;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 根据RemarkToken信息获得退改签信息
 */
@DtoDoc("根据RemarkToken信息获得退改签信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name = "IntlPenaltySearchAsyncRequest", namespace = "urn:ctrip:api:flight:message:Product:IntlPenaltySearch:v1")
@XmlType(name = "IntlPenaltySearchRequestType", propOrder = {
    "requestHeader",
    "searchCriteria"
})
@SuppressWarnings("all")
public class IntlPenaltySearchRequestType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"IntlPenaltySearchRequestType\",\"namespace\":\"" + IntlPenaltySearchRequestType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"requestHeader\",\"type\":{\"type\":\"record\",\"name\":\"RequestHeaderType\",\"namespace\":\"" + RequestHeaderType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"messageHeader\",\"type\":{\"type\":\"record\",\"name\":\"MessageHeaderType\",\"namespace\":\"" + MessageHeaderType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"sourceAppID\",\"type\":[\"string\",\"null\"]},{\"name\":\"sessionID\",\"type\":[\"string\",\"null\"]},{\"name\":\"transactionID\",\"type\":[\"string\",\"null\"]},{\"name\":\"channelID\",\"type\":[{\"type\":\"enum\",\"name\":\"ChannelIDType\",\"namespace\":\"" + ChannelIDType.class.getPackage().getName() + "\",\"symbols\":[\"FlightOnline\",\"FlightOffline\",\"FlightExternal\",\"FlightIntlOnline\",\"FlightIntlOffline\",\"FltIntlExternal\",\"FlightIntlOnlineSEO\",\"Corporation\",\"CorpOffline\",\"CorpMobile\",\"Vacation\",\"VacationGroup\",\"RestrictedVacation\",\"FitTravel\",\"Mobile\",\"MobileH5\",\"Hotel\",\"AirHotel\",\"AirHotelIntl\",\"AirHotelIntlEx\",\"AirHotelPackage\",\"EnglishSite\",\"HighRail\",\"Affiliate\",\"Luxury\",\"Customer\",\"Mice\",\"Community\",\"EzTravel\",\"Wingon\",\"Distribution\",\"BIChannel\",\"Finance\",\"ConfirmCustomer\",\"HKSite\",\"KRSite\",\"JPSite\",\"SGSite\",\"TWSite\",\"THSite\",\"Qunar\"]},\"null\"]},{\"name\":\"subChannelID\",\"type\":[\"int\",\"null\"]},{\"name\":\"customerID\",\"type\":[\"string\",\"null\"]},{\"name\":\"agentID\",\"type\":[\"string\",\"null\"]},{\"name\":\"clientIP\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"sourceAppID\",\"type\":[\"string\",\"null\"]},{\"name\":\"sessionID\",\"type\":[\"string\",\"null\"]},{\"name\":\"transactionID\",\"type\":[\"string\",\"null\"]},{\"name\":\"channelID\",\"type\":[\"ChannelIDType\",\"null\"]},{\"name\":\"subChannelID\",\"type\":[\"int\",\"null\"]},{\"name\":\"customerID\",\"type\":[\"string\",\"null\"]},{\"name\":\"agentID\",\"type\":[\"string\",\"null\"]},{\"name\":\"clientIP\",\"type\":[\"string\",\"null\"]},{\"name\":\"loggingLevel\",\"type\":\"int\"},{\"name\":\"diagInput\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"searchCriteria\",\"type\":{\"type\":\"record\",\"name\":\"SearchCriteriaType\",\"namespace\":\"" + SearchCriteriaType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"clientType\",\"type\":\"int\"},{\"name\":\"penaltyRequestInfoList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PenaltyRequestInfoType\",\"namespace\":\"" + PenaltyRequestInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"penaltyKey\",\"type\":[\"string\",\"null\"]},{\"name\":\"qteTokenNumber\",\"type\":[\"string\",\"null\"]},{\"name\":\"bookingChannel\",\"type\":[\"string\",\"null\"]},{\"name\":\"extendInfo\",\"type\":{\"type\":\"record\",\"name\":\"ExtendInfoType\",\"namespace\":\"" + ExtendInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"isReplaceCtripRule\",\"type\":\"boolean\"},{\"name\":\"isPennyRefund\",\"type\":\"boolean\"}]}}]}}}]}}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public IntlPenaltySearchRequestType(
        RequestHeaderType requestHeader, 
        SearchCriteriaType searchCriteria) {
        this.requestHeader = requestHeader;
        this.searchCriteria = searchCriteria;
    }

    public IntlPenaltySearchRequestType() {
    }

    @FieldDoc("请求头")
    @JsonProperty("RequestHeader")
    @XmlElement(name = "RequestHeader")
    private RequestHeaderType requestHeader;

    @FieldDoc("查询退改签信息的Token")
    @JsonProperty("SearchCriteria")
    @XmlElement(name = "SearchCriteria")
    private SearchCriteriaType searchCriteria;

    /**
     * 请求头
     */
    public RequestHeaderType getRequestHeader() {
        return this.requestHeader;
    }

    public void setRequestHeader(RequestHeaderType requestHeader) {
        this.requestHeader = requestHeader;
    }

    /**
     * 查询退改签信息的Token
     */
    public SearchCriteriaType getSearchCriteria() {
        return this.searchCriteria;
    }

    public void setSearchCriteria(SearchCriteriaType searchCriteria) {
        this.searchCriteria = searchCriteria;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (RequestHeaderType) this.requestHeader;
            case 1: return (SearchCriteriaType) this.searchCriteria;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.requestHeader = (RequestHeaderType)fieldValue; break;
            case 1: this.searchCriteria = (SearchCriteriaType)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final IntlPenaltySearchRequestType other = (IntlPenaltySearchRequestType)obj;
        return
            Objects.equal(this.requestHeader, other.requestHeader) && 
            Objects.equal(this.searchCriteria, other.searchCriteria);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.requestHeader);
        result = 31 * result + Objects.hashCode(this.searchCriteria);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("requestHeader", requestHeader)
            .add("searchCriteria", searchCriteria)
            .toString();
    }
}