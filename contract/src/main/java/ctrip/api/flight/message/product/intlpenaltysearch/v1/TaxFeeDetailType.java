/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.message.product.intlpenaltysearch.v1;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import ctrip.api.flight.data.flighttypes.v2.*;
import ctrip.api.flight.data.flighttypes.v2.CurrencyInfoType;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         AdultTaxFee：成人税费
 *         ChildTaxFee：儿童税费
 *         InfantTaxFee：婴儿税费
 *       
 */
@DtoDoc("AdultTaxFee：成人税费" +
        "ChildTaxFee：儿童税费" +
        "InfantTaxFee：婴儿税费")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TaxFeeDetailType", propOrder = {
    "adultTaxFee",
    "childTaxFee",
    "infantTaxFee",
    "currencyInfo"
})
@SuppressWarnings("all")
public class TaxFeeDetailType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"TaxFeeDetailType\",\"namespace\":\"" + TaxFeeDetailType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"adultTaxFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"childTaxFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"infantTaxFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"currencyInfo\",\"type\":{\"type\":\"record\",\"name\":\"CurrencyInfoType\",\"namespace\":\"" + CurrencyInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"currency\",\"type\":[\"string\",\"null\"]},{\"name\":\"exchangeRate\",\"type\":[\"string\",\"null\"]}]}}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public TaxFeeDetailType(
        BigDecimal adultTaxFee, 
        BigDecimal childTaxFee, 
        BigDecimal infantTaxFee, 
        CurrencyInfoType currencyInfo) {
        this.adultTaxFee = adultTaxFee;
        this.childTaxFee = childTaxFee;
        this.infantTaxFee = infantTaxFee;
        this.currencyInfo = currencyInfo;
    }

    public TaxFeeDetailType() {
    }

    @JsonProperty("AdultTaxFee")
    @XmlElement(name = "AdultTaxFee")
    private BigDecimal adultTaxFee;

    @JsonProperty("ChildTaxFee")
    @XmlElement(name = "ChildTaxFee")
    private BigDecimal childTaxFee;

    @JsonProperty("InfantTaxFee")
    @XmlElement(name = "InfantTaxFee")
    private BigDecimal infantTaxFee;

    @FieldDoc("费用的币种信息")
    @JsonProperty("CurrencyInfo")
    @XmlElement(name = "CurrencyInfo")
    private CurrencyInfoType currencyInfo;

    public BigDecimal getAdultTaxFee() {
        return this.adultTaxFee;
    }

    public void setAdultTaxFee(BigDecimal adultTaxFee) {
        this.adultTaxFee = adultTaxFee;
    }

    public BigDecimal getChildTaxFee() {
        return this.childTaxFee;
    }

    public void setChildTaxFee(BigDecimal childTaxFee) {
        this.childTaxFee = childTaxFee;
    }

    public BigDecimal getInfantTaxFee() {
        return this.infantTaxFee;
    }

    public void setInfantTaxFee(BigDecimal infantTaxFee) {
        this.infantTaxFee = infantTaxFee;
    }

    /**
     * 费用的币种信息
     */
    public CurrencyInfoType getCurrencyInfo() {
        return this.currencyInfo;
    }

    public void setCurrencyInfo(CurrencyInfoType currencyInfo) {
        this.currencyInfo = currencyInfo;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return TypeConverter.convert(this.adultTaxFee, String.class);
            case 1: return TypeConverter.convert(this.childTaxFee, String.class);
            case 2: return TypeConverter.convert(this.infantTaxFee, String.class);
            case 3: return (CurrencyInfoType) this.currencyInfo;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.adultTaxFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 1: this.childTaxFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 2: this.infantTaxFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 3: this.currencyInfo = (CurrencyInfoType)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final TaxFeeDetailType other = (TaxFeeDetailType)obj;
        return
            Objects.equal(this.adultTaxFee, other.adultTaxFee) && 
            Objects.equal(this.childTaxFee, other.childTaxFee) && 
            Objects.equal(this.infantTaxFee, other.infantTaxFee) && 
            Objects.equal(this.currencyInfo, other.currencyInfo);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.adultTaxFee);
        result = 31 * result + Objects.hashCode(this.childTaxFee);
        result = 31 * result + Objects.hashCode(this.infantTaxFee);
        result = 31 * result + Objects.hashCode(this.currencyInfo);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("adultTaxFee", adultTaxFee)
            .add("childTaxFee", childTaxFee)
            .add("infantTaxFee", infantTaxFee)
            .add("currencyInfo", currencyInfo)
            .toString();
    }
}