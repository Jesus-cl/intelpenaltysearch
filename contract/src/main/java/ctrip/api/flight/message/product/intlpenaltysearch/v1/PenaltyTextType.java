/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.message.product.intlpenaltysearch.v1;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         FcGroupID：FC号，1：去程，2：回程
 *         NonRefund：T:不可退；F：可退；H：有条件可退
 *         NonReroute：T:不可改；F：可改；H：有条件可改
 *         RefundRemark：去程/返程退备注
 *         RerouteRemark：去程/返程改备注
 *         Remark：备注信息
 *       
 */
@DtoDoc("FcGroupID：FC号，1：去程，2：回程" +
        "NonRefund：	T:不可退；F：可退；H：有条件可退" +
        "NonReroute：	T:不可改；F：可改；H：有条件可改" +
        "RefundRemark：去程/返程退备注" +
        "RerouteRemark：去程/返程改备注" +
        "Remark：备注信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PenaltyTextType", propOrder = {
    "fcGroupID",
    "nonRefund",
    "nonReroute",
    "refundRemark",
    "rerouteRemark",
    "remark"
})
@SuppressWarnings("all")
public class PenaltyTextType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"PenaltyTextType\",\"namespace\":\"" + PenaltyTextType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"fcGroupID\",\"type\":\"int\"},{\"name\":\"nonRefund\",\"type\":[\"string\",\"null\"]},{\"name\":\"nonReroute\",\"type\":[\"string\",\"null\"]},{\"name\":\"refundRemark\",\"type\":{\"type\":\"record\",\"name\":\"RemarkTextType\",\"namespace\":\"" + RemarkTextType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"textCN\",\"type\":[\"string\",\"null\"]},{\"name\":\"textEN\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"rerouteRemark\",\"type\":\"RemarkTextType\"},{\"name\":\"remark\",\"type\":\"RemarkTextType\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public PenaltyTextType(
        int fcGroupID, 
        String nonRefund, 
        String nonReroute, 
        RemarkTextType refundRemark, 
        RemarkTextType rerouteRemark, 
        RemarkTextType remark) {
        this.fcGroupID = fcGroupID;
        this.nonRefund = nonRefund;
        this.nonReroute = nonReroute;
        this.refundRemark = refundRemark;
        this.rerouteRemark = rerouteRemark;
        this.remark = remark;
    }

    public PenaltyTextType() {
    }

    @JsonProperty("FcGroupID")
    @XmlElement(name = "FcGroupID")
    private int fcGroupID;

    @JsonProperty("NonRefund")
    @XmlElement(name = "NonRefund")
    private String nonRefund;

    @JsonProperty("NonReroute")
    @XmlElement(name = "NonReroute")
    private String nonReroute;

    @JsonProperty("RefundRemark")
    @XmlElement(name = "RefundRemark")
    private RemarkTextType refundRemark;

    @JsonProperty("RerouteRemark")
    @XmlElement(name = "RerouteRemark")
    private RemarkTextType rerouteRemark;

    @JsonProperty("Remark")
    @XmlElement(name = "Remark")
    private RemarkTextType remark;

    public int getFcGroupID() {
        return this.fcGroupID;
    }

    public void setFcGroupID(int fcGroupID) {
        this.fcGroupID = fcGroupID;
    }

    public String getNonRefund() {
        return this.nonRefund;
    }

    public void setNonRefund(String nonRefund) {
        this.nonRefund = nonRefund;
    }

    public String getNonReroute() {
        return this.nonReroute;
    }

    public void setNonReroute(String nonReroute) {
        this.nonReroute = nonReroute;
    }

    public RemarkTextType getRefundRemark() {
        return this.refundRemark;
    }

    public void setRefundRemark(RemarkTextType refundRemark) {
        this.refundRemark = refundRemark;
    }

    public RemarkTextType getRerouteRemark() {
        return this.rerouteRemark;
    }

    public void setRerouteRemark(RemarkTextType rerouteRemark) {
        this.rerouteRemark = rerouteRemark;
    }

    public RemarkTextType getRemark() {
        return this.remark;
    }

    public void setRemark(RemarkTextType remark) {
        this.remark = remark;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (int) this.fcGroupID;
            case 1: return (String) this.nonRefund;
            case 2: return (String) this.nonReroute;
            case 3: return (RemarkTextType) this.refundRemark;
            case 4: return (RemarkTextType) this.rerouteRemark;
            case 5: return (RemarkTextType) this.remark;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.fcGroupID = (int)fieldValue; break;
            case 1: this.nonRefund = (String)fieldValue; break;
            case 2: this.nonReroute = (String)fieldValue; break;
            case 3: this.refundRemark = (RemarkTextType)fieldValue; break;
            case 4: this.rerouteRemark = (RemarkTextType)fieldValue; break;
            case 5: this.remark = (RemarkTextType)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final PenaltyTextType other = (PenaltyTextType)obj;
        return
            Objects.equal(this.fcGroupID, other.fcGroupID) && 
            Objects.equal(this.nonRefund, other.nonRefund) && 
            Objects.equal(this.nonReroute, other.nonReroute) && 
            Objects.equal(this.refundRemark, other.refundRemark) && 
            Objects.equal(this.rerouteRemark, other.rerouteRemark) && 
            Objects.equal(this.remark, other.remark);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.fcGroupID);
        result = 31 * result + Objects.hashCode(this.nonRefund);
        result = 31 * result + Objects.hashCode(this.nonReroute);
        result = 31 * result + Objects.hashCode(this.refundRemark);
        result = 31 * result + Objects.hashCode(this.rerouteRemark);
        result = 31 * result + Objects.hashCode(this.remark);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("fcGroupID", fcGroupID)
            .add("nonRefund", nonRefund)
            .add("nonReroute", nonReroute)
            .add("refundRemark", refundRemark)
            .add("rerouteRemark", rerouteRemark)
            .add("remark", remark)
            .toString();
    }
}