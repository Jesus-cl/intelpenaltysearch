/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.message.product.intlpenaltysearch.v1;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SearchCriteriaType", propOrder = {
    "clientType",
    "penaltyRequestInfoList"
})
@SuppressWarnings("all")
public class SearchCriteriaType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"SearchCriteriaType\",\"namespace\":\"" + SearchCriteriaType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"clientType\",\"type\":\"int\"},{\"name\":\"penaltyRequestInfoList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PenaltyRequestInfoType\",\"namespace\":\"" + PenaltyRequestInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"penaltyKey\",\"type\":[\"string\",\"null\"]},{\"name\":\"qteTokenNumber\",\"type\":[\"string\",\"null\"]},{\"name\":\"bookingChannel\",\"type\":[\"string\",\"null\"]},{\"name\":\"extendInfo\",\"type\":{\"type\":\"record\",\"name\":\"ExtendInfoType\",\"namespace\":\"" + ExtendInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"isReplaceCtripRule\",\"type\":\"boolean\"},{\"name\":\"isPennyRefund\",\"type\":\"boolean\"}]}}]}}}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public SearchCriteriaType(
        int clientType, 
        List<PenaltyRequestInfoType> penaltyRequestInfoList) {
        this.clientType = clientType;
        this.penaltyRequestInfoList = penaltyRequestInfoList;
    }

    public SearchCriteriaType() {
    }

    @FieldDoc("0:返回简化版的格式化结果（仅供前端展示）; 1: 返回详细的格式化和非格式化结果（可供下单落地）")
    @JsonProperty("ClientType")
    @XmlElement(name = "ClientType")
    private int clientType;

    @FieldDoc("查询退改签信息的key")
    @JsonProperty("PenaltyRequestInfoList")
    @XmlElement(name = "PenaltyRequestInfo")
    @XmlElementWrapper(name = "PenaltyRequestInfoList")
    private List<PenaltyRequestInfoType> penaltyRequestInfoList;

    /**
     * 0:返回简化版的格式化结果（仅供前端展示）; 1: 返回详细的格式化和非格式化结果（可供下单落地）
     */
    public int getClientType() {
        return this.clientType;
    }

    public void setClientType(int clientType) {
        this.clientType = clientType;
    }

    /**
     * 查询退改签信息的key
     */
    public List<PenaltyRequestInfoType> getPenaltyRequestInfoList() {
        return this.penaltyRequestInfoList;
    }

    public void setPenaltyRequestInfoList(List<PenaltyRequestInfoType> penaltyRequestInfoList) {
        this.penaltyRequestInfoList = penaltyRequestInfoList;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (int) this.clientType;
            case 1: return (List<PenaltyRequestInfoType>) this.penaltyRequestInfoList;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.clientType = (int)fieldValue; break;
            case 1: this.penaltyRequestInfoList = (List<PenaltyRequestInfoType>)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final SearchCriteriaType other = (SearchCriteriaType)obj;
        return
            Objects.equal(this.clientType, other.clientType) && 
            Objects.equal(this.penaltyRequestInfoList, other.penaltyRequestInfoList);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.clientType);
        result = 31 * result + Objects.hashCode(this.penaltyRequestInfoList);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("clientType", clientType)
            .add("penaltyRequestInfoList", penaltyRequestInfoList)
            .toString();
    }
}