/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.message.product.intlpenaltysearch.v1;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ExtendInfoType", propOrder = {
    "isReplaceCtripRule",
    "isPennyRefund"
})
@SuppressWarnings("all")
public class ExtendInfoType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"ExtendInfoType\",\"namespace\":\"" + ExtendInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"isReplaceCtripRule\",\"type\":\"boolean\"},{\"name\":\"isPennyRefund\",\"type\":\"boolean\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public ExtendInfoType(
        boolean isReplaceCtripRule, 
        boolean isPennyRefund) {
        this.isReplaceCtripRule = isReplaceCtripRule;
        this.isPennyRefund = isPennyRefund;
    }

    public ExtendInfoType() {
    }

    @FieldDoc("CSD引擎使用，是否替换成大系统的退改签")
    @JsonProperty("IsReplaceCtripRule")
    @XmlElement(name = "IsReplaceCtripRule")
    private boolean isReplaceCtripRule;

    @FieldDoc("24小时小额退产品标示")
    @JsonProperty("IsPennyRefund")
    @XmlElement(name = "IsPennyRefund")
    private boolean isPennyRefund;

    /**
     * CSD引擎使用，是否替换成大系统的退改签
     */
    public boolean getIsReplaceCtripRule() {
        return this.isReplaceCtripRule;
    }

    public void setIsReplaceCtripRule(boolean isReplaceCtripRule) {
        this.isReplaceCtripRule = isReplaceCtripRule;
    }

    /**
     * 24小时小额退产品标示
     */
    public boolean getIsPennyRefund() {
        return this.isPennyRefund;
    }

    public void setIsPennyRefund(boolean isPennyRefund) {
        this.isPennyRefund = isPennyRefund;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (boolean) this.isReplaceCtripRule;
            case 1: return (boolean) this.isPennyRefund;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.isReplaceCtripRule = (boolean)fieldValue; break;
            case 1: this.isPennyRefund = (boolean)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final ExtendInfoType other = (ExtendInfoType)obj;
        return
            Objects.equal(this.isReplaceCtripRule, other.isReplaceCtripRule) && 
            Objects.equal(this.isPennyRefund, other.isPennyRefund);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.isReplaceCtripRule);
        result = 31 * result + Objects.hashCode(this.isPennyRefund);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("isReplaceCtripRule", isReplaceCtripRule)
            .add("isPennyRefund", isPennyRefund)
            .toString();
    }
}