/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.message.product.intlpenaltysearch.v1;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PenaltyTextResultType", propOrder = {
    "penaltyTextList",
    "noShowRemark"
})
@SuppressWarnings("all")
public class PenaltyTextResultType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"PenaltyTextResultType\",\"namespace\":\"" + PenaltyTextResultType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"penaltyTextList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PenaltyTextType\",\"namespace\":\"" + PenaltyTextType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"fcGroupID\",\"type\":\"int\"},{\"name\":\"nonRefund\",\"type\":[\"string\",\"null\"]},{\"name\":\"nonReroute\",\"type\":[\"string\",\"null\"]},{\"name\":\"refundRemark\",\"type\":{\"type\":\"record\",\"name\":\"RemarkTextType\",\"namespace\":\"" + RemarkTextType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"textCN\",\"type\":[\"string\",\"null\"]},{\"name\":\"textEN\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"rerouteRemark\",\"type\":\"RemarkTextType\"},{\"name\":\"remark\",\"type\":\"RemarkTextType\"}]}}},{\"name\":\"noShowRemark\",\"type\":\"RemarkTextType\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public PenaltyTextResultType(
        List<PenaltyTextType> penaltyTextList, 
        RemarkTextType noShowRemark) {
        this.penaltyTextList = penaltyTextList;
        this.noShowRemark = noShowRemark;
    }

    public PenaltyTextResultType() {
    }

    @JsonProperty("PenaltyTextList")
    @XmlElement(name = "PenaltyText")
    @XmlElementWrapper(name = "PenaltyTextList")
    private List<PenaltyTextType> penaltyTextList;

    @FieldDoc("noshow备注")
    @JsonProperty("NoShowRemark")
    @XmlElement(name = "NoShowRemark")
    private RemarkTextType noShowRemark;

    public List<PenaltyTextType> getPenaltyTextList() {
        return this.penaltyTextList;
    }

    public void setPenaltyTextList(List<PenaltyTextType> penaltyTextList) {
        this.penaltyTextList = penaltyTextList;
    }

    /**
     * noshow备注
     */
    public RemarkTextType getNoShowRemark() {
        return this.noShowRemark;
    }

    public void setNoShowRemark(RemarkTextType noShowRemark) {
        this.noShowRemark = noShowRemark;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (List<PenaltyTextType>) this.penaltyTextList;
            case 1: return (RemarkTextType) this.noShowRemark;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.penaltyTextList = (List<PenaltyTextType>)fieldValue; break;
            case 1: this.noShowRemark = (RemarkTextType)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final PenaltyTextResultType other = (PenaltyTextResultType)obj;
        return
            Objects.equal(this.penaltyTextList, other.penaltyTextList) && 
            Objects.equal(this.noShowRemark, other.noShowRemark);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.penaltyTextList);
        result = 31 * result + Objects.hashCode(this.noShowRemark);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("penaltyTextList", penaltyTextList)
            .add("noShowRemark", noShowRemark)
            .toString();
    }
}