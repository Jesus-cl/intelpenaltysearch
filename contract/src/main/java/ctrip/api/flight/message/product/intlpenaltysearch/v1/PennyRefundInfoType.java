/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.message.product.intlpenaltysearch.v1;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PennyRefundInfoType", propOrder = {
    "pennyRefundFee",
    "currency",
    "pennyRefFeeRMB",
    "pennyRefFeeForeign"
})
@SuppressWarnings("all")
public class PennyRefundInfoType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"PennyRefundInfoType\",\"namespace\":\"" + PennyRefundInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"pennyRefundFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"currency\",\"type\":[\"string\",\"null\"]},{\"name\":\"pennyRefFeeRMB\",\"type\":{\"type\":\"record\",\"name\":\"PennyRefundDetailType\",\"namespace\":\"" + PennyRefundDetailType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"currency\",\"type\":[\"string\",\"null\"]},{\"name\":\"feeByCtrip\",\"type\":[\"string\",\"null\"]},{\"name\":\"feeByCarrier\",\"type\":[\"string\",\"null\"]},{\"name\":\"feeByConsolidator\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"pennyRefFeeForeign\",\"type\":\"PennyRefundDetailType\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public PennyRefundInfoType(
        BigDecimal pennyRefundFee, 
        String currency, 
        PennyRefundDetailType pennyRefFeeRMB, 
        PennyRefundDetailType pennyRefFeeForeign) {
        this.pennyRefundFee = pennyRefundFee;
        this.currency = currency;
        this.pennyRefFeeRMB = pennyRefFeeRMB;
        this.pennyRefFeeForeign = pennyRefFeeForeign;
    }

    public PennyRefundInfoType() {
    }

    @JsonProperty("PennyRefundFee")
    @XmlElement(name = "PennyRefundFee")
    private BigDecimal pennyRefundFee;

    @JsonProperty("Currency")
    @XmlElement(name = "Currency")
    private String currency;

    @JsonProperty("PennyRefFeeRMB")
    @XmlElement(name = "PennyRefFeeRMB")
    private PennyRefundDetailType pennyRefFeeRMB;

    @JsonProperty("PennyRefFeeForeign")
    @XmlElement(name = "PennyRefFeeForeign")
    private PennyRefundDetailType pennyRefFeeForeign;

    public BigDecimal getPennyRefundFee() {
        return this.pennyRefundFee;
    }

    public void setPennyRefundFee(BigDecimal pennyRefundFee) {
        this.pennyRefundFee = pennyRefundFee;
    }

    public String getCurrency() {
        return this.currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public PennyRefundDetailType getPennyRefFeeRMB() {
        return this.pennyRefFeeRMB;
    }

    public void setPennyRefFeeRMB(PennyRefundDetailType pennyRefFeeRMB) {
        this.pennyRefFeeRMB = pennyRefFeeRMB;
    }

    public PennyRefundDetailType getPennyRefFeeForeign() {
        return this.pennyRefFeeForeign;
    }

    public void setPennyRefFeeForeign(PennyRefundDetailType pennyRefFeeForeign) {
        this.pennyRefFeeForeign = pennyRefFeeForeign;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return TypeConverter.convert(this.pennyRefundFee, String.class);
            case 1: return (String) this.currency;
            case 2: return (PennyRefundDetailType) this.pennyRefFeeRMB;
            case 3: return (PennyRefundDetailType) this.pennyRefFeeForeign;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.pennyRefundFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 1: this.currency = (String)fieldValue; break;
            case 2: this.pennyRefFeeRMB = (PennyRefundDetailType)fieldValue; break;
            case 3: this.pennyRefFeeForeign = (PennyRefundDetailType)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final PennyRefundInfoType other = (PennyRefundInfoType)obj;
        return
            Objects.equal(this.pennyRefundFee, other.pennyRefundFee) && 
            Objects.equal(this.currency, other.currency) && 
            Objects.equal(this.pennyRefFeeRMB, other.pennyRefFeeRMB) && 
            Objects.equal(this.pennyRefFeeForeign, other.pennyRefFeeForeign);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.pennyRefundFee);
        result = 31 * result + Objects.hashCode(this.currency);
        result = 31 * result + Objects.hashCode(this.pennyRefFeeRMB);
        result = 31 * result + Objects.hashCode(this.pennyRefFeeForeign);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("pennyRefundFee", pennyRefundFee)
            .add("currency", currency)
            .add("pennyRefFeeRMB", pennyRefFeeRMB)
            .add("pennyRefFeeForeign", pennyRefFeeForeign)
            .toString();
    }
}