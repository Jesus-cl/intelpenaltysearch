/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.message.product.intlpenaltysearch.v1;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import ctrip.api.flight.data.flighttypes.v2.*;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 税费结果
 */
@DtoDoc("税费结果")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TaxFeeInfoType", propOrder = {
    "taxFeeDetailRMB",
    "taxFeeDetailForeign",
    "refundTaxServiceFee",
    "taxType",
    "taxCode"
})
@SuppressWarnings("all")
public class TaxFeeInfoType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"TaxFeeInfoType\",\"namespace\":\"" + TaxFeeInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"taxFeeDetailRMB\",\"type\":{\"type\":\"record\",\"name\":\"TaxFeeDetailType\",\"namespace\":\"" + TaxFeeDetailType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"adultTaxFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"childTaxFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"infantTaxFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"currencyInfo\",\"type\":{\"type\":\"record\",\"name\":\"CurrencyInfoType\",\"namespace\":\"" + CurrencyInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"currency\",\"type\":[\"string\",\"null\"]},{\"name\":\"exchangeRate\",\"type\":[\"string\",\"null\"]}]}}]}},{\"name\":\"taxFeeDetailForeign\",\"type\":\"TaxFeeDetailType\"},{\"name\":\"refundTaxServiceFee\",\"type\":{\"type\":\"record\",\"name\":\"FeeInfoType\",\"namespace\":\"" + FeeInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"fee\",\"type\":[\"string\",\"null\"]},{\"name\":\"currencyInfo\",\"type\":\"" + CurrencyInfoType.class.getName() + "\"}]}},{\"name\":\"taxType\",\"type\":[\"string\",\"null\"]},{\"name\":\"taxCode\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public TaxFeeInfoType(
        TaxFeeDetailType taxFeeDetailRMB, 
        TaxFeeDetailType taxFeeDetailForeign, 
        FeeInfoType refundTaxServiceFee, 
        String taxType, 
        String taxCode) {
        this.taxFeeDetailRMB = taxFeeDetailRMB;
        this.taxFeeDetailForeign = taxFeeDetailForeign;
        this.refundTaxServiceFee = refundTaxServiceFee;
        this.taxType = taxType;
        this.taxCode = taxCode;
    }

    public TaxFeeInfoType() {
    }

    @FieldDoc("税费明细，前端展示。已减去退税手续费。币种是人民币")
    @JsonProperty("TaxFeeDetailRMB")
    @XmlElement(name = "TaxFeeDetailRMB")
    private TaxFeeDetailType taxFeeDetailRMB;

    @FieldDoc("税费明细，下单落库使用。未减去退税手续费。币种是票台币种")
    @JsonProperty("TaxFeeDetailForeign")
    @XmlElement(name = "TaxFeeDetailForeign")
    private TaxFeeDetailType taxFeeDetailForeign;

    @FieldDoc("退税的手续费，下单落库使用")
    @JsonProperty("RefundTaxServiceFee")
    @XmlElement(name = "RefundTaxServiceFee")
    private FeeInfoType refundTaxServiceFee;

    @FieldDoc("退税类型，下单落地。包括：全退，只退，除外退税，不退")
    @JsonProperty("TaxType")
    @XmlElement(name = "TaxType")
    private String taxType;

    @FieldDoc("税费代码Code，下单落地。格式：YR/YQ")
    @JsonProperty("TaxCode")
    @XmlElement(name = "TaxCode")
    private String taxCode;

    /**
     * 税费明细，前端展示。已减去退税手续费。币种是人民币
     */
    public TaxFeeDetailType getTaxFeeDetailRMB() {
        return this.taxFeeDetailRMB;
    }

    public void setTaxFeeDetailRMB(TaxFeeDetailType taxFeeDetailRMB) {
        this.taxFeeDetailRMB = taxFeeDetailRMB;
    }

    /**
     * 税费明细，下单落库使用。未减去退税手续费。币种是票台币种
     */
    public TaxFeeDetailType getTaxFeeDetailForeign() {
        return this.taxFeeDetailForeign;
    }

    public void setTaxFeeDetailForeign(TaxFeeDetailType taxFeeDetailForeign) {
        this.taxFeeDetailForeign = taxFeeDetailForeign;
    }

    /**
     * 退税的手续费，下单落库使用
     */
    public FeeInfoType getRefundTaxServiceFee() {
        return this.refundTaxServiceFee;
    }

    public void setRefundTaxServiceFee(FeeInfoType refundTaxServiceFee) {
        this.refundTaxServiceFee = refundTaxServiceFee;
    }

    /**
     * 退税类型，下单落地。包括：全退，只退，除外退税，不退
     */
    public String getTaxType() {
        return this.taxType;
    }

    public void setTaxType(String taxType) {
        this.taxType = taxType;
    }

    /**
     * 税费代码Code，下单落地。格式：YR/YQ
     */
    public String getTaxCode() {
        return this.taxCode;
    }

    public void setTaxCode(String taxCode) {
        this.taxCode = taxCode;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (TaxFeeDetailType) this.taxFeeDetailRMB;
            case 1: return (TaxFeeDetailType) this.taxFeeDetailForeign;
            case 2: return (FeeInfoType) this.refundTaxServiceFee;
            case 3: return (String) this.taxType;
            case 4: return (String) this.taxCode;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.taxFeeDetailRMB = (TaxFeeDetailType)fieldValue; break;
            case 1: this.taxFeeDetailForeign = (TaxFeeDetailType)fieldValue; break;
            case 2: this.refundTaxServiceFee = (FeeInfoType)fieldValue; break;
            case 3: this.taxType = (String)fieldValue; break;
            case 4: this.taxCode = (String)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final TaxFeeInfoType other = (TaxFeeInfoType)obj;
        return
            Objects.equal(this.taxFeeDetailRMB, other.taxFeeDetailRMB) && 
            Objects.equal(this.taxFeeDetailForeign, other.taxFeeDetailForeign) && 
            Objects.equal(this.refundTaxServiceFee, other.refundTaxServiceFee) && 
            Objects.equal(this.taxType, other.taxType) && 
            Objects.equal(this.taxCode, other.taxCode);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.taxFeeDetailRMB);
        result = 31 * result + Objects.hashCode(this.taxFeeDetailForeign);
        result = 31 * result + Objects.hashCode(this.refundTaxServiceFee);
        result = 31 * result + Objects.hashCode(this.taxType);
        result = 31 * result + Objects.hashCode(this.taxCode);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("taxFeeDetailRMB", taxFeeDetailRMB)
            .add("taxFeeDetailForeign", taxFeeDetailForeign)
            .add("refundTaxServiceFee", refundTaxServiceFee)
            .add("taxType", taxType)
            .add("taxCode", taxCode)
            .toString();
    }
}