/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.message.product.intlpenaltysearch.v1;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TaxDetailType", propOrder = {
    "totalAmount",
    "currencyType",
    "taxItemList"
})
@SuppressWarnings("all")
public class TaxDetailType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"TaxDetailType\",\"namespace\":\"" + TaxDetailType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"totalAmount\",\"type\":[\"string\",\"null\"]},{\"name\":\"currencyType\",\"type\":[\"string\",\"null\"]},{\"name\":\"taxItemList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TaxItemType\",\"namespace\":\"" + TaxItemType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"taxItemName\",\"type\":[\"string\",\"null\"]},{\"name\":\"taxItemAmount\",\"type\":[\"string\",\"null\"]}]}}}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public TaxDetailType(
        BigDecimal totalAmount, 
        String currencyType, 
        List<TaxItemType> taxItemList) {
        this.totalAmount = totalAmount;
        this.currencyType = currencyType;
        this.taxItemList = taxItemList;
    }

    public TaxDetailType() {
    }

    @JsonProperty("TotalAmount")
    @XmlElement(name = "TotalAmount")
    private BigDecimal totalAmount;

    @JsonProperty("CurrencyType")
    @XmlElement(name = "CurrencyType")
    private String currencyType;

    @JsonProperty("TaxItemList")
    @XmlElement(name = "TaxItemType")
    @XmlElementWrapper(name = "TaxItemList")
    private List<TaxItemType> taxItemList;

    public BigDecimal getTotalAmount() {
        return this.totalAmount;
    }

    public void setTotalAmount(BigDecimal totalAmount) {
        this.totalAmount = totalAmount;
    }

    public String getCurrencyType() {
        return this.currencyType;
    }

    public void setCurrencyType(String currencyType) {
        this.currencyType = currencyType;
    }

    public List<TaxItemType> getTaxItemList() {
        return this.taxItemList;
    }

    public void setTaxItemList(List<TaxItemType> taxItemList) {
        this.taxItemList = taxItemList;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return TypeConverter.convert(this.totalAmount, String.class);
            case 1: return (String) this.currencyType;
            case 2: return (List<TaxItemType>) this.taxItemList;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.totalAmount = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 1: this.currencyType = (String)fieldValue; break;
            case 2: this.taxItemList = (List<TaxItemType>)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final TaxDetailType other = (TaxDetailType)obj;
        return
            Objects.equal(this.totalAmount, other.totalAmount) && 
            Objects.equal(this.currencyType, other.currencyType) && 
            Objects.equal(this.taxItemList, other.taxItemList);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.totalAmount);
        result = 31 * result + Objects.hashCode(this.currencyType);
        result = 31 * result + Objects.hashCode(this.taxItemList);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("totalAmount", totalAmount)
            .add("currencyType", currencyType)
            .add("taxItemList", taxItemList)
            .toString();
    }
}