/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.message.product.intlpenaltysearch.v1;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PenaltyFeeType", propOrder = {
    "fcGroupID",
    "flag",
    "settleRMBFee",
    "settleForeignFee",
    "noShowCondition",
    "noShowFlag",
    "noShowSettleRMBFee",
    "noShowSettleForeignFee"
})
@SuppressWarnings("all")
public class PenaltyFeeType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"PenaltyFeeType\",\"namespace\":\"" + PenaltyFeeType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"fcGroupID\",\"type\":\"int\"},{\"name\":\"flag\",\"type\":[{\"type\":\"enum\",\"name\":\"TicketAlterType\",\"namespace\":\"" + TicketAlterType.class.getPackage().getName() + "\",\"symbols\":[\"Prohibition\",\"Allows\",\"Regulation\",\"Supplement\"]},\"null\"]},{\"name\":\"settleRMBFee\",\"type\":{\"type\":\"record\",\"name\":\"FeeType\",\"namespace\":\"" + FeeType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"adultFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"childFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"infantFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"currency\",\"type\":[\"string\",\"null\"]},{\"name\":\"exchangeRate\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"settleForeignFee\",\"type\":\"FeeType\"},{\"name\":\"noShowCondition\",\"type\":[\"string\",\"null\"]},{\"name\":\"noShowFlag\",\"type\":[\"TicketAlterType\",\"null\"]},{\"name\":\"noShowSettleRMBFee\",\"type\":\"FeeType\"},{\"name\":\"noShowSettleForeignFee\",\"type\":\"FeeType\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public PenaltyFeeType(
        int fcGroupID, 
        TicketAlterType flag, 
        FeeType settleRMBFee, 
        FeeType settleForeignFee, 
        BigDecimal noShowCondition, 
        TicketAlterType noShowFlag, 
        FeeType noShowSettleRMBFee, 
        FeeType noShowSettleForeignFee) {
        this.fcGroupID = fcGroupID;
        this.flag = flag;
        this.settleRMBFee = settleRMBFee;
        this.settleForeignFee = settleForeignFee;
        this.noShowCondition = noShowCondition;
        this.noShowFlag = noShowFlag;
        this.noShowSettleRMBFee = noShowSettleRMBFee;
        this.noShowSettleForeignFee = noShowSettleForeignFee;
    }

    public PenaltyFeeType() {
    }

    @FieldDoc("去程是 1，回程是2")
    @JsonProperty("FcGroupID")
    @XmlElement(name = "FcGroupID")
    private int fcGroupID;

    @JsonProperty("Flag")
    @XmlElement(name = "Flag")
    private TicketAlterType flag;

    @FieldDoc("人民币种")
    @JsonProperty("SettleRMBFee")
    @XmlElement(name = "SettleRMBFee")
    private FeeType settleRMBFee;

    @FieldDoc("票台币种，仅下单使用")
    @JsonProperty("SettleForeignFee")
    @XmlElement(name = "SettleForeignFee")
    private FeeType settleForeignFee;

    @JsonProperty("NoShowCondition")
    @XmlElement(name = "NoShowCondition")
    private BigDecimal noShowCondition;

    @JsonProperty("NoShowFlag")
    @XmlElement(name = "NoShowFlag")
    private TicketAlterType noShowFlag;

    @FieldDoc("noshow后的费用信息，人民币种")
    @JsonProperty("NoShowSettleRMBFee")
    @XmlElement(name = "NoShowSettleRMBFee")
    private FeeType noShowSettleRMBFee;

    @FieldDoc("noshow后的费用信息，票台币种。仅下单使用")
    @JsonProperty("NoShowSettleForeignFee")
    @XmlElement(name = "NoShowSettleForeignFee")
    private FeeType noShowSettleForeignFee;

    /**
     * 去程是 1，回程是2
     */
    public int getFcGroupID() {
        return this.fcGroupID;
    }

    public void setFcGroupID(int fcGroupID) {
        this.fcGroupID = fcGroupID;
    }

    public TicketAlterType getFlag() {
        return this.flag;
    }

    public void setFlag(TicketAlterType flag) {
        this.flag = flag;
    }

    /**
     * 人民币种
     */
    public FeeType getSettleRMBFee() {
        return this.settleRMBFee;
    }

    public void setSettleRMBFee(FeeType settleRMBFee) {
        this.settleRMBFee = settleRMBFee;
    }

    /**
     * 票台币种，仅下单使用
     */
    public FeeType getSettleForeignFee() {
        return this.settleForeignFee;
    }

    public void setSettleForeignFee(FeeType settleForeignFee) {
        this.settleForeignFee = settleForeignFee;
    }

    public BigDecimal getNoShowCondition() {
        return this.noShowCondition;
    }

    public void setNoShowCondition(BigDecimal noShowCondition) {
        this.noShowCondition = noShowCondition;
    }

    public TicketAlterType getNoShowFlag() {
        return this.noShowFlag;
    }

    public void setNoShowFlag(TicketAlterType noShowFlag) {
        this.noShowFlag = noShowFlag;
    }

    /**
     * noshow后的费用信息，人民币种
     */
    public FeeType getNoShowSettleRMBFee() {
        return this.noShowSettleRMBFee;
    }

    public void setNoShowSettleRMBFee(FeeType noShowSettleRMBFee) {
        this.noShowSettleRMBFee = noShowSettleRMBFee;
    }

    /**
     * noshow后的费用信息，票台币种。仅下单使用
     */
    public FeeType getNoShowSettleForeignFee() {
        return this.noShowSettleForeignFee;
    }

    public void setNoShowSettleForeignFee(FeeType noShowSettleForeignFee) {
        this.noShowSettleForeignFee = noShowSettleForeignFee;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (int) this.fcGroupID;
            case 1: return (TicketAlterType) this.flag;
            case 2: return (FeeType) this.settleRMBFee;
            case 3: return (FeeType) this.settleForeignFee;
            case 4: return TypeConverter.convert(this.noShowCondition, String.class);
            case 5: return (TicketAlterType) this.noShowFlag;
            case 6: return (FeeType) this.noShowSettleRMBFee;
            case 7: return (FeeType) this.noShowSettleForeignFee;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.fcGroupID = (int)fieldValue; break;
            case 1: this.flag = (TicketAlterType)fieldValue; break;
            case 2: this.settleRMBFee = (FeeType)fieldValue; break;
            case 3: this.settleForeignFee = (FeeType)fieldValue; break;
            case 4: this.noShowCondition = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 5: this.noShowFlag = (TicketAlterType)fieldValue; break;
            case 6: this.noShowSettleRMBFee = (FeeType)fieldValue; break;
            case 7: this.noShowSettleForeignFee = (FeeType)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final PenaltyFeeType other = (PenaltyFeeType)obj;
        return
            Objects.equal(this.fcGroupID, other.fcGroupID) && 
            Objects.equal(this.flag, other.flag) && 
            Objects.equal(this.settleRMBFee, other.settleRMBFee) && 
            Objects.equal(this.settleForeignFee, other.settleForeignFee) && 
            Objects.equal(this.noShowCondition, other.noShowCondition) && 
            Objects.equal(this.noShowFlag, other.noShowFlag) && 
            Objects.equal(this.noShowSettleRMBFee, other.noShowSettleRMBFee) && 
            Objects.equal(this.noShowSettleForeignFee, other.noShowSettleForeignFee);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.fcGroupID);
        result = 31 * result + Objects.hashCode(this.flag);
        result = 31 * result + Objects.hashCode(this.settleRMBFee);
        result = 31 * result + Objects.hashCode(this.settleForeignFee);
        result = 31 * result + Objects.hashCode(this.noShowCondition);
        result = 31 * result + Objects.hashCode(this.noShowFlag);
        result = 31 * result + Objects.hashCode(this.noShowSettleRMBFee);
        result = 31 * result + Objects.hashCode(this.noShowSettleForeignFee);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("fcGroupID", fcGroupID)
            .add("flag", flag)
            .add("settleRMBFee", settleRMBFee)
            .add("settleForeignFee", settleForeignFee)
            .add("noShowCondition", noShowCondition)
            .add("noShowFlag", noShowFlag)
            .add("noShowSettleRMBFee", noShowSettleRMBFee)
            .add("noShowSettleForeignFee", noShowSettleForeignFee)
            .toString();
    }
}