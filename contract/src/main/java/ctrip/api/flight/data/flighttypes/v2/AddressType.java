/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 地址
 */
@DtoDoc("地址")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AddressType", propOrder = {
    "province",
    "city",
    "district",
    "addr",
    "postCode"
})
@SuppressWarnings("all")
public class AddressType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"AddressType\",\"namespace\":\"" + AddressType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"province\",\"type\":[\"string\",\"null\"]},{\"name\":\"city\",\"type\":[\"string\",\"null\"]},{\"name\":\"district\",\"type\":[\"string\",\"null\"]},{\"name\":\"addr\",\"type\":[\"string\",\"null\"]},{\"name\":\"postCode\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public AddressType(
        String province, 
        String city, 
        String district, 
        String addr, 
        String postCode) {
        this.province = province;
        this.city = city;
        this.district = district;
        this.addr = addr;
        this.postCode = postCode;
    }

    public AddressType() {
    }

    @JsonProperty("Province")
    @XmlElement(name = "Province")
    private String province;

    @JsonProperty("City")
    @XmlElement(name = "City")
    private String city;

    @JsonProperty("District")
    @XmlElement(name = "District")
    private String district;

    @JsonProperty("Addr")
    @XmlElement(name = "Addr")
    private String addr;

    @JsonProperty("PostCode")
    @XmlElement(name = "PostCode")
    private String postCode;

    public String getProvince() {
        return this.province;
    }

    public void setProvince(String province) {
        this.province = province;
    }

    public String getCity() {
        return this.city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getDistrict() {
        return this.district;
    }

    public void setDistrict(String district) {
        this.district = district;
    }

    public String getAddr() {
        return this.addr;
    }

    public void setAddr(String addr) {
        this.addr = addr;
    }

    public String getPostCode() {
        return this.postCode;
    }

    public void setPostCode(String postCode) {
        this.postCode = postCode;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.province;
            case 1: return (String) this.city;
            case 2: return (String) this.district;
            case 3: return (String) this.addr;
            case 4: return (String) this.postCode;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.province = (String)fieldValue; break;
            case 1: this.city = (String)fieldValue; break;
            case 2: this.district = (String)fieldValue; break;
            case 3: this.addr = (String)fieldValue; break;
            case 4: this.postCode = (String)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final AddressType other = (AddressType)obj;
        return
            Objects.equal(this.province, other.province) && 
            Objects.equal(this.city, other.city) && 
            Objects.equal(this.district, other.district) && 
            Objects.equal(this.addr, other.addr) && 
            Objects.equal(this.postCode, other.postCode);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.province);
        result = 31 * result + Objects.hashCode(this.city);
        result = 31 * result + Objects.hashCode(this.district);
        result = 31 * result + Objects.hashCode(this.addr);
        result = 31 * result + Objects.hashCode(this.postCode);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("province", province)
            .add("city", city)
            .add("district", district)
            .add("addr", addr)
            .add("postCode", postCode)
            .toString();
    }
}