/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PassengerValueAddInfoType", propOrder = {
    "surName",
    "givenName",
    "valueAddBookingList"
})
@SuppressWarnings("all")
public class PassengerValueAddInfoType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"PassengerValueAddInfoType\",\"namespace\":\"" + PassengerValueAddInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"surName\",\"type\":[\"string\",\"null\"]},{\"name\":\"givenName\",\"type\":[\"string\",\"null\"]},{\"name\":\"valueAddBookingList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ValueAddInfoType\",\"namespace\":\"" + ValueAddInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"segmentSeqID\",\"type\":\"int\"},{\"name\":\"origDestSeqID\",\"type\":\"int\"},{\"name\":\"valueAddSalePriceList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ValueAddSalePriceInfoType\",\"namespace\":\"" + ValueAddSalePriceInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"salePrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"bookSalePrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"airportSalePrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"refundFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"weight\",\"type\":\"int\"},{\"name\":\"description\",\"type\":[\"string\",\"null\"]},{\"name\":\"pkgNumber\",\"type\":[\"string\",\"null\"]},{\"name\":\"tag\",\"type\":[\"string\",\"null\"]},{\"name\":\"freeWeight\",\"type\":[\"string\",\"null\"]},{\"name\":\"chargeWeight\",\"type\":[\"string\",\"null\"]},{\"name\":\"agentCode\",\"type\":[\"string\",\"null\"]}]}}}]}}}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public PassengerValueAddInfoType(
        String surName, 
        String givenName, 
        List<ValueAddInfoType> valueAddBookingList) {
        this.surName = surName;
        this.givenName = givenName;
        this.valueAddBookingList = valueAddBookingList;
    }

    public PassengerValueAddInfoType() {
    }

    @FieldDoc("姓")
    @JsonProperty("SurName")
    @XmlElement(name = "SurName")
    private String surName;

    @FieldDoc("名")
    @JsonProperty("GivenName")
    @XmlElement(name = "GivenName")
    private String givenName;

    @FieldDoc("增值服务详情")
    @JsonProperty("ValueAddBookingList")
    @XmlElement(name = "ValueAddInfo")
    @XmlElementWrapper(name = "ValueAddBookingList")
    private List<ValueAddInfoType> valueAddBookingList;

    /**
     * 姓
     */
    public String getSurName() {
        return this.surName;
    }

    public void setSurName(String surName) {
        this.surName = surName;
    }

    /**
     * 名
     */
    public String getGivenName() {
        return this.givenName;
    }

    public void setGivenName(String givenName) {
        this.givenName = givenName;
    }

    /**
     * 增值服务详情
     */
    public List<ValueAddInfoType> getValueAddBookingList() {
        return this.valueAddBookingList;
    }

    public void setValueAddBookingList(List<ValueAddInfoType> valueAddBookingList) {
        this.valueAddBookingList = valueAddBookingList;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.surName;
            case 1: return (String) this.givenName;
            case 2: return (List<ValueAddInfoType>) this.valueAddBookingList;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.surName = (String)fieldValue; break;
            case 1: this.givenName = (String)fieldValue; break;
            case 2: this.valueAddBookingList = (List<ValueAddInfoType>)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final PassengerValueAddInfoType other = (PassengerValueAddInfoType)obj;
        return
            Objects.equal(this.surName, other.surName) && 
            Objects.equal(this.givenName, other.givenName) && 
            Objects.equal(this.valueAddBookingList, other.valueAddBookingList);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.surName);
        result = 31 * result + Objects.hashCode(this.givenName);
        result = 31 * result + Objects.hashCode(this.valueAddBookingList);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("surName", surName)
            .add("givenName", givenName)
            .add("valueAddBookingList", valueAddBookingList)
            .toString();
    }
}