/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AirlineInfoType", propOrder = {
    "airlineCode",
    "airlineName",
    "alliance"
})
@SuppressWarnings("all")
public class AirlineInfoType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"AirlineInfoType\",\"namespace\":\"" + AirlineInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"airlineCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"airlineName\",\"type\":[\"string\",\"null\"]},{\"name\":\"alliance\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public AirlineInfoType(
        String airlineCode, 
        String airlineName, 
        String alliance) {
        this.airlineCode = airlineCode;
        this.airlineName = airlineName;
        this.alliance = alliance;
    }

    public AirlineInfoType() {
    }

    @JsonProperty("AirlineCode")
    @XmlElement(name = "AirlineCode")
    private String airlineCode;

    @JsonProperty("AirlineName")
    @XmlElement(name = "AirlineName")
    private String airlineName;

    @JsonProperty("Alliance")
    @XmlElement(name = "Alliance")
    private String alliance;

    public String getAirlineCode() {
        return this.airlineCode;
    }

    public void setAirlineCode(String airlineCode) {
        this.airlineCode = airlineCode;
    }

    public String getAirlineName() {
        return this.airlineName;
    }

    public void setAirlineName(String airlineName) {
        this.airlineName = airlineName;
    }

    public String getAlliance() {
        return this.alliance;
    }

    public void setAlliance(String alliance) {
        this.alliance = alliance;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.airlineCode;
            case 1: return (String) this.airlineName;
            case 2: return (String) this.alliance;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.airlineCode = (String)fieldValue; break;
            case 1: this.airlineName = (String)fieldValue; break;
            case 2: this.alliance = (String)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final AirlineInfoType other = (AirlineInfoType)obj;
        return
            Objects.equal(this.airlineCode, other.airlineCode) && 
            Objects.equal(this.airlineName, other.airlineName) && 
            Objects.equal(this.alliance, other.alliance);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.airlineCode);
        result = 31 * result + Objects.hashCode(this.airlineName);
        result = 31 * result + Objects.hashCode(this.alliance);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("airlineCode", airlineCode)
            .add("airlineName", airlineName)
            .add("alliance", alliance)
            .toString();
    }
}