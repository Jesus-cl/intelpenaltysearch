/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FareInfoType", propOrder = {
    "fareID",
    "fareBasis",
    "fareSource",
    "ownerCarrier",
    "fareType",
    "accountCode",
    "ticketDesignator",
    "tourCode"
})
@SuppressWarnings("all")
public class FareInfoType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"FareInfoType\",\"namespace\":\"" + FareInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"fareID\",\"type\":[\"string\",\"null\"]},{\"name\":\"fareBasis\",\"type\":[\"string\",\"null\"]},{\"name\":\"fareSource\",\"type\":\"int\"},{\"name\":\"ownerCarrier\",\"type\":[\"string\",\"null\"]},{\"name\":\"fareType\",\"type\":\"int\"},{\"name\":\"accountCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"ticketDesignator\",\"type\":[\"string\",\"null\"]},{\"name\":\"tourCode\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public FareInfoType(
        String fareID, 
        String fareBasis, 
        int fareSource, 
        String ownerCarrier, 
        int fareType, 
        String accountCode, 
        String ticketDesignator, 
        String tourCode) {
        this.fareID = fareID;
        this.fareBasis = fareBasis;
        this.fareSource = fareSource;
        this.ownerCarrier = ownerCarrier;
        this.fareType = fareType;
        this.accountCode = accountCode;
        this.ticketDesignator = ticketDesignator;
        this.tourCode = tourCode;
    }

    public FareInfoType() {
    }

    @FieldDoc("运价唯一ID")
    @JsonProperty("FareID")
    @XmlElement(name = "FareID")
    private String fareID;

    @JsonProperty("FareBasis")
    @XmlElement(name = "FareBasis")
    private String fareBasis;

    @FieldDoc("运价来源")
    @JsonProperty("FareSource")
    @XmlElement(name = "FareSource")
    private int fareSource;

    @FieldDoc("运价发布航司")
    @JsonProperty("OwnerCarrier")
    @XmlElement(name = "OwnerCarrier")
    private String ownerCarrier;

    @FieldDoc("运价类型")
    @JsonProperty("FareType")
    @XmlElement(name = "FareType")
    private int fareType;

    @FieldDoc("运价的AccountCode")
    @JsonProperty("AccountCode")
    @XmlElement(name = "AccountCode")
    private String accountCode;

    @FieldDoc("运价的TicketDesignator")
    @JsonProperty("TicketDesignator")
    @XmlElement(name = "TicketDesignator")
    private String ticketDesignator;

    @FieldDoc("运价的TourCode")
    @JsonProperty("TourCode")
    @XmlElement(name = "TourCode")
    private String tourCode;

    /**
     * 运价唯一ID
     */
    public String getFareID() {
        return this.fareID;
    }

    public void setFareID(String fareID) {
        this.fareID = fareID;
    }

    public String getFareBasis() {
        return this.fareBasis;
    }

    public void setFareBasis(String fareBasis) {
        this.fareBasis = fareBasis;
    }

    /**
     * 运价来源
     */
    public int getFareSource() {
        return this.fareSource;
    }

    public void setFareSource(int fareSource) {
        this.fareSource = fareSource;
    }

    /**
     * 运价发布航司
     */
    public String getOwnerCarrier() {
        return this.ownerCarrier;
    }

    public void setOwnerCarrier(String ownerCarrier) {
        this.ownerCarrier = ownerCarrier;
    }

    /**
     * 运价类型
     */
    public int getFareType() {
        return this.fareType;
    }

    public void setFareType(int fareType) {
        this.fareType = fareType;
    }

    /**
     * 运价的AccountCode
     */
    public String getAccountCode() {
        return this.accountCode;
    }

    public void setAccountCode(String accountCode) {
        this.accountCode = accountCode;
    }

    /**
     * 运价的TicketDesignator
     */
    public String getTicketDesignator() {
        return this.ticketDesignator;
    }

    public void setTicketDesignator(String ticketDesignator) {
        this.ticketDesignator = ticketDesignator;
    }

    /**
     * 运价的TourCode
     */
    public String getTourCode() {
        return this.tourCode;
    }

    public void setTourCode(String tourCode) {
        this.tourCode = tourCode;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.fareID;
            case 1: return (String) this.fareBasis;
            case 2: return (int) this.fareSource;
            case 3: return (String) this.ownerCarrier;
            case 4: return (int) this.fareType;
            case 5: return (String) this.accountCode;
            case 6: return (String) this.ticketDesignator;
            case 7: return (String) this.tourCode;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.fareID = (String)fieldValue; break;
            case 1: this.fareBasis = (String)fieldValue; break;
            case 2: this.fareSource = (int)fieldValue; break;
            case 3: this.ownerCarrier = (String)fieldValue; break;
            case 4: this.fareType = (int)fieldValue; break;
            case 5: this.accountCode = (String)fieldValue; break;
            case 6: this.ticketDesignator = (String)fieldValue; break;
            case 7: this.tourCode = (String)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final FareInfoType other = (FareInfoType)obj;
        return
            Objects.equal(this.fareID, other.fareID) && 
            Objects.equal(this.fareBasis, other.fareBasis) && 
            Objects.equal(this.fareSource, other.fareSource) && 
            Objects.equal(this.ownerCarrier, other.ownerCarrier) && 
            Objects.equal(this.fareType, other.fareType) && 
            Objects.equal(this.accountCode, other.accountCode) && 
            Objects.equal(this.ticketDesignator, other.ticketDesignator) && 
            Objects.equal(this.tourCode, other.tourCode);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.fareID);
        result = 31 * result + Objects.hashCode(this.fareBasis);
        result = 31 * result + Objects.hashCode(this.fareSource);
        result = 31 * result + Objects.hashCode(this.ownerCarrier);
        result = 31 * result + Objects.hashCode(this.fareType);
        result = 31 * result + Objects.hashCode(this.accountCode);
        result = 31 * result + Objects.hashCode(this.ticketDesignator);
        result = 31 * result + Objects.hashCode(this.tourCode);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("fareID", fareID)
            .add("fareBasis", fareBasis)
            .add("fareSource", fareSource)
            .add("ownerCarrier", ownerCarrier)
            .add("fareType", fareType)
            .add("accountCode", accountCode)
            .add("ticketDesignator", ticketDesignator)
            .add("tourCode", tourCode)
            .toString();
    }
}