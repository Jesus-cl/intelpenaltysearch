/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 图片信息
 */
@DtoDoc("图片信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PicType", propOrder = {
    "picSmall",
    "picLarge",
    "title",
    "desc"
})
@SuppressWarnings("all")
public class PicType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"PicType\",\"namespace\":\"" + PicType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"picSmall\",\"type\":[\"string\",\"null\"]},{\"name\":\"picLarge\",\"type\":[\"string\",\"null\"]},{\"name\":\"title\",\"type\":[\"string\",\"null\"]},{\"name\":\"desc\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public PicType(
        String picSmall, 
        String picLarge, 
        String title, 
        String desc) {
        this.picSmall = picSmall;
        this.picLarge = picLarge;
        this.title = title;
        this.desc = desc;
    }

    public PicType() {
    }

    @FieldDoc("小图片URL")
    @JsonProperty("PicSmall")
    @XmlElement(name = "PicSmall")
    private String picSmall;

    @FieldDoc("大图片URL")
    @JsonProperty("PicLarge")
    @XmlElement(name = "PicLarge")
    private String picLarge;

    @FieldDoc("图片标题")
    @JsonProperty("Title")
    @XmlElement(name = "Title")
    private String title;

    @FieldDoc("图片描述")
    @JsonProperty("Desc")
    @XmlElement(name = "Desc")
    private String desc;

    /**
     * 小图片URL
     */
    public String getPicSmall() {
        return this.picSmall;
    }

    public void setPicSmall(String picSmall) {
        this.picSmall = picSmall;
    }

    /**
     * 大图片URL
     */
    public String getPicLarge() {
        return this.picLarge;
    }

    public void setPicLarge(String picLarge) {
        this.picLarge = picLarge;
    }

    /**
     * 图片标题
     */
    public String getTitle() {
        return this.title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * 图片描述
     */
    public String getDesc() {
        return this.desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.picSmall;
            case 1: return (String) this.picLarge;
            case 2: return (String) this.title;
            case 3: return (String) this.desc;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.picSmall = (String)fieldValue; break;
            case 1: this.picLarge = (String)fieldValue; break;
            case 2: this.title = (String)fieldValue; break;
            case 3: this.desc = (String)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final PicType other = (PicType)obj;
        return
            Objects.equal(this.picSmall, other.picSmall) && 
            Objects.equal(this.picLarge, other.picLarge) && 
            Objects.equal(this.title, other.title) && 
            Objects.equal(this.desc, other.desc);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.picSmall);
        result = 31 * result + Objects.hashCode(this.picLarge);
        result = 31 * result + Objects.hashCode(this.title);
        result = 31 * result + Objects.hashCode(this.desc);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("picSmall", picSmall)
            .add("picLarge", picLarge)
            .add("title", title)
            .add("desc", desc)
            .toString();
    }
}