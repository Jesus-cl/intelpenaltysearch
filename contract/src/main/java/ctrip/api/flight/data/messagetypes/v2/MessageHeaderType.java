/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.messagetypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 此类型包含请求/响应报文共有的属性
 */
@DtoDoc("此类型包含请求/响应报文共有的属性")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MessageHeaderType", propOrder = {
    "sourceAppID",
    "sessionID",
    "transactionID",
    "channelID",
    "subChannelID",
    "customerID",
    "agentID",
    "clientIP"
})
@SuppressWarnings("all")
public class MessageHeaderType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"MessageHeaderType\",\"namespace\":\"" + MessageHeaderType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"sourceAppID\",\"type\":[\"string\",\"null\"]},{\"name\":\"sessionID\",\"type\":[\"string\",\"null\"]},{\"name\":\"transactionID\",\"type\":[\"string\",\"null\"]},{\"name\":\"channelID\",\"type\":[{\"type\":\"enum\",\"name\":\"ChannelIDType\",\"namespace\":\"" + ChannelIDType.class.getPackage().getName() + "\",\"symbols\":[\"FlightOnline\",\"FlightOffline\",\"FlightExternal\",\"FlightIntlOnline\",\"FlightIntlOffline\",\"FltIntlExternal\",\"FlightIntlOnlineSEO\",\"Corporation\",\"CorpOffline\",\"CorpMobile\",\"Vacation\",\"VacationGroup\",\"RestrictedVacation\",\"FitTravel\",\"Mobile\",\"MobileH5\",\"Hotel\",\"AirHotel\",\"AirHotelIntl\",\"AirHotelIntlEx\",\"AirHotelPackage\",\"EnglishSite\",\"HighRail\",\"Affiliate\",\"Luxury\",\"Customer\",\"Mice\",\"Community\",\"EzTravel\",\"Wingon\",\"Distribution\",\"BIChannel\",\"Finance\",\"ConfirmCustomer\",\"HKSite\",\"KRSite\",\"JPSite\",\"SGSite\",\"TWSite\",\"THSite\",\"Qunar\"]},\"null\"]},{\"name\":\"subChannelID\",\"type\":[\"int\",\"null\"]},{\"name\":\"customerID\",\"type\":[\"string\",\"null\"]},{\"name\":\"agentID\",\"type\":[\"string\",\"null\"]},{\"name\":\"clientIP\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public MessageHeaderType(
        String sourceAppID, 
        String sessionID, 
        String transactionID, 
        ChannelIDType channelID, 
        Integer subChannelID, 
        String customerID, 
        String agentID, 
        String clientIP) {
        this.sourceAppID = sourceAppID;
        this.sessionID = sessionID;
        this.transactionID = transactionID;
        this.channelID = channelID;
        this.subChannelID = subChannelID;
        this.customerID = customerID;
        this.agentID = agentID;
        this.clientIP = clientIP;
    }

    public MessageHeaderType() {
    }

    @FieldDoc("调用方的应用ID")
    @JsonProperty("SourceAppID")
    @XmlElement(name = "SourceAppID")
    private String sourceAppID;

    @FieldDoc("用来标识终端用户会话，便于查找特定用户在网站上活动记录")
    @JsonProperty("SessionID")
    @XmlElement(name = "SessionID")
    private String sessionID;

    @FieldDoc("用来标识事务号，可用于查询在不同应用系统中属于同一事务的所有数据")
    @JsonProperty("TransactionID")
    @XmlElement(name = "TransactionID")
    private String transactionID;

    @FieldDoc("销售渠道，枚举值")
    @JsonProperty("ChannelID")
    @XmlElement(name = "ChannelID")
    private ChannelIDType channelID;

    @FieldDoc("子渠道标识，(引入以避免修改ChannelID枚举值)")
    @JsonProperty("SubChannelID")
    @XmlElement(name = "SubChannelID", nillable = true)
    private Integer subChannelID;

    @FieldDoc("当前登录用户ID,例如:wwwwww")
    @JsonProperty("CustomerID")
    @XmlElement(name = "CustomerID")
    private String customerID;

    @FieldDoc("当前登录操作员ID")
    @JsonProperty("AgentID")
    @XmlElement(name = "AgentID")
    private String agentID;

    @FieldDoc("客户端请求IP")
    @JsonProperty("ClientIP")
    @XmlElement(name = "ClientIP")
    private String clientIP;

    /**
     * 调用方的应用ID
     */
    public String getSourceAppID() {
        return this.sourceAppID;
    }

    public void setSourceAppID(String sourceAppID) {
        this.sourceAppID = sourceAppID;
    }

    /**
     * 用来标识终端用户会话，便于查找特定用户在网站上活动记录
     */
    public String getSessionID() {
        return this.sessionID;
    }

    public void setSessionID(String sessionID) {
        this.sessionID = sessionID;
    }

    /**
     * 用来标识事务号，可用于查询在不同应用系统中属于同一事务的所有数据
     */
    public String getTransactionID() {
        return this.transactionID;
    }

    public void setTransactionID(String transactionID) {
        this.transactionID = transactionID;
    }

    /**
     * 销售渠道，枚举值
     */
    public ChannelIDType getChannelID() {
        return this.channelID;
    }

    public void setChannelID(ChannelIDType channelID) {
        this.channelID = channelID;
    }

    /**
     * 子渠道标识，(引入以避免修改ChannelID枚举值)
     */
    public Integer getSubChannelID() {
        return this.subChannelID;
    }

    public void setSubChannelID(Integer subChannelID) {
        this.subChannelID = subChannelID;
    }

    /**
     * 当前登录用户ID,例如:wwwwww
     */
    public String getCustomerID() {
        return this.customerID;
    }

    public void setCustomerID(String customerID) {
        this.customerID = customerID;
    }

    /**
     * 当前登录操作员ID
     */
    public String getAgentID() {
        return this.agentID;
    }

    public void setAgentID(String agentID) {
        this.agentID = agentID;
    }

    /**
     * 客户端请求IP
     */
    public String getClientIP() {
        return this.clientIP;
    }

    public void setClientIP(String clientIP) {
        this.clientIP = clientIP;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.sourceAppID;
            case 1: return (String) this.sessionID;
            case 2: return (String) this.transactionID;
            case 3: return (ChannelIDType) this.channelID;
            case 4: return (Integer) this.subChannelID;
            case 5: return (String) this.customerID;
            case 6: return (String) this.agentID;
            case 7: return (String) this.clientIP;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.sourceAppID = (String)fieldValue; break;
            case 1: this.sessionID = (String)fieldValue; break;
            case 2: this.transactionID = (String)fieldValue; break;
            case 3: this.channelID = (ChannelIDType)fieldValue; break;
            case 4: this.subChannelID = (Integer)fieldValue; break;
            case 5: this.customerID = (String)fieldValue; break;
            case 6: this.agentID = (String)fieldValue; break;
            case 7: this.clientIP = (String)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final MessageHeaderType other = (MessageHeaderType)obj;
        return
            Objects.equal(this.sourceAppID, other.sourceAppID) && 
            Objects.equal(this.sessionID, other.sessionID) && 
            Objects.equal(this.transactionID, other.transactionID) && 
            Objects.equal(this.channelID, other.channelID) && 
            Objects.equal(this.subChannelID, other.subChannelID) && 
            Objects.equal(this.customerID, other.customerID) && 
            Objects.equal(this.agentID, other.agentID) && 
            Objects.equal(this.clientIP, other.clientIP);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.sourceAppID);
        result = 31 * result + Objects.hashCode(this.sessionID);
        result = 31 * result + Objects.hashCode(this.transactionID);
        result = 31 * result + Objects.hashCode(this.channelID);
        result = 31 * result + Objects.hashCode(this.subChannelID);
        result = 31 * result + Objects.hashCode(this.customerID);
        result = 31 * result + Objects.hashCode(this.agentID);
        result = 31 * result + Objects.hashCode(this.clientIP);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("sourceAppID", sourceAppID)
            .add("sessionID", sessionID)
            .add("transactionID", transactionID)
            .add("channelID", channelID)
            .add("subChannelID", subChannelID)
            .add("customerID", customerID)
            .add("agentID", agentID)
            .add("clientIP", clientIP)
            .toString();
    }
}