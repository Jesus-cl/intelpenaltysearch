/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 舱位信息
 */
@DtoDoc("舱位信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FlightSegmentType", propOrder = {
    "productDetailIndex",
    "fcSequence",
    "seatClass",
    "seatGrade",
    "seatSource",
    "seatCount",
    "bookingToken",
    "stockID"
})
@SuppressWarnings("all")
public class FlightSegmentType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"FlightSegmentType\",\"namespace\":\"" + FlightSegmentType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"productDetailIndex\",\"type\":\"int\"},{\"name\":\"fcSequence\",\"type\":\"int\"},{\"name\":\"seatClass\",\"type\":[\"string\",\"null\"]},{\"name\":\"seatGrade\",\"type\":[{\"type\":\"enum\",\"name\":\"CabinClassType\",\"namespace\":\"" + CabinClassType.class.getPackage().getName() + "\",\"symbols\":[\"Economy\",\"Premium\",\"Business\",\"First\"]},\"null\"]},{\"name\":\"seatSource\",\"type\":\"int\"},{\"name\":\"seatCount\",\"type\":\"int\"},{\"name\":\"bookingToken\",\"type\":[\"string\",\"null\"]},{\"name\":\"stockID\",\"type\":\"long\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public FlightSegmentType(
        int productDetailIndex, 
        int fcSequence, 
        String seatClass, 
        CabinClassType seatGrade, 
        int seatSource, 
        int seatCount, 
        String bookingToken, 
        long stockID) {
        this.productDetailIndex = productDetailIndex;
        this.fcSequence = fcSequence;
        this.seatClass = seatClass;
        this.seatGrade = seatGrade;
        this.seatSource = seatSource;
        this.seatCount = seatCount;
        this.bookingToken = bookingToken;
        this.stockID = stockID;
    }

    public FlightSegmentType() {
    }

    @FieldDoc("对应ProductDetail顺序号")
    @JsonProperty("ProductDetailIndex")
    @XmlElement(name = "ProductDetailIndex")
    private int productDetailIndex;

    @FieldDoc("对应FC顺序号，列表查询不输出")
    @JsonProperty("FCSequence")
    @XmlElement(name = "FCSequence")
    private int fcSequence;

    @FieldDoc("*舱位")
    @JsonProperty("SeatClass")
    @XmlElement(name = "SeatClass")
    private String seatClass;

    @FieldDoc("*舱等（经济舱/超级经济舱/商务舱/头等舱）")
    @JsonProperty("SeatGrade")
    @XmlElement(name = "SeatGrade")
    private CabinClassType seatGrade;

    @FieldDoc("来源，列表查询不输出")
    @JsonProperty("SeatSource")
    @XmlElement(name = "SeatSource")
    private int seatSource;

    @FieldDoc("舱位数量")
    @JsonProperty("SeatCount")
    @XmlElement(name = "SeatCount")
    private int seatCount;

    @FieldDoc("舱位预订额外标识，附加舱等信息，QTE，订位使用[春秋专用，对应其AgreementID]，列表查询不输出")
    @JsonProperty("BookingToken")
    @XmlElement(name = "BookingToken")
    private String bookingToken;

    @FieldDoc("库存ID，列表查询不输出")
    @JsonProperty("StockID")
    @XmlElement(name = "StockID")
    private long stockID;

    /**
     * 对应ProductDetail顺序号
     */
    public int getProductDetailIndex() {
        return this.productDetailIndex;
    }

    public void setProductDetailIndex(int productDetailIndex) {
        this.productDetailIndex = productDetailIndex;
    }

    /**
     * 对应FC顺序号，列表查询不输出
     */
    public int getFcSequence() {
        return this.fcSequence;
    }

    public void setFcSequence(int fcSequence) {
        this.fcSequence = fcSequence;
    }

    /**
     * *舱位
     */
    public String getSeatClass() {
        return this.seatClass;
    }

    public void setSeatClass(String seatClass) {
        this.seatClass = seatClass;
    }

    /**
     * *舱等（经济舱/超级经济舱/商务舱/头等舱）
     */
    public CabinClassType getSeatGrade() {
        return this.seatGrade;
    }

    public void setSeatGrade(CabinClassType seatGrade) {
        this.seatGrade = seatGrade;
    }

    /**
     * 来源，列表查询不输出
     */
    public int getSeatSource() {
        return this.seatSource;
    }

    public void setSeatSource(int seatSource) {
        this.seatSource = seatSource;
    }

    /**
     * 舱位数量
     */
    public int getSeatCount() {
        return this.seatCount;
    }

    public void setSeatCount(int seatCount) {
        this.seatCount = seatCount;
    }

    /**
     * 舱位预订额外标识，附加舱等信息，QTE，订位使用[春秋专用，对应其AgreementID]，列表查询不输出
     */
    public String getBookingToken() {
        return this.bookingToken;
    }

    public void setBookingToken(String bookingToken) {
        this.bookingToken = bookingToken;
    }

    /**
     * 库存ID，列表查询不输出
     */
    public long getStockID() {
        return this.stockID;
    }

    public void setStockID(long stockID) {
        this.stockID = stockID;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (int) this.productDetailIndex;
            case 1: return (int) this.fcSequence;
            case 2: return (String) this.seatClass;
            case 3: return (CabinClassType) this.seatGrade;
            case 4: return (int) this.seatSource;
            case 5: return (int) this.seatCount;
            case 6: return (String) this.bookingToken;
            case 7: return (long) this.stockID;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.productDetailIndex = (int)fieldValue; break;
            case 1: this.fcSequence = (int)fieldValue; break;
            case 2: this.seatClass = (String)fieldValue; break;
            case 3: this.seatGrade = (CabinClassType)fieldValue; break;
            case 4: this.seatSource = (int)fieldValue; break;
            case 5: this.seatCount = (int)fieldValue; break;
            case 6: this.bookingToken = (String)fieldValue; break;
            case 7: this.stockID = (long)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final FlightSegmentType other = (FlightSegmentType)obj;
        return
            Objects.equal(this.productDetailIndex, other.productDetailIndex) && 
            Objects.equal(this.fcSequence, other.fcSequence) && 
            Objects.equal(this.seatClass, other.seatClass) && 
            Objects.equal(this.seatGrade, other.seatGrade) && 
            Objects.equal(this.seatSource, other.seatSource) && 
            Objects.equal(this.seatCount, other.seatCount) && 
            Objects.equal(this.bookingToken, other.bookingToken) && 
            Objects.equal(this.stockID, other.stockID);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.productDetailIndex);
        result = 31 * result + Objects.hashCode(this.fcSequence);
        result = 31 * result + Objects.hashCode(this.seatClass);
        result = 31 * result + Objects.hashCode(this.seatGrade);
        result = 31 * result + Objects.hashCode(this.seatSource);
        result = 31 * result + Objects.hashCode(this.seatCount);
        result = 31 * result + Objects.hashCode(this.bookingToken);
        result = 31 * result + Objects.hashCode(this.stockID);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("productDetailIndex", productDetailIndex)
            .add("fcSequence", fcSequence)
            .add("seatClass", seatClass)
            .add("seatGrade", seatGrade)
            .add("seatSource", seatSource)
            .add("seatCount", seatCount)
            .add("bookingToken", bookingToken)
            .add("stockID", stockID)
            .toString();
    }
}