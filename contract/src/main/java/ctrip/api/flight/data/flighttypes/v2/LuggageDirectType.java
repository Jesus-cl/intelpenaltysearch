/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LuggageDirectType", propOrder = {
    "segmentNo",
    "sequenceNo",
    "luggageDirectStatus"
})
@SuppressWarnings("all")
public class LuggageDirectType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"LuggageDirectType\",\"namespace\":\"" + LuggageDirectType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"segmentNo\",\"type\":\"int\"},{\"name\":\"sequenceNo\",\"type\":\"int\"},{\"name\":\"luggageDirectStatus\",\"type\":\"int\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public LuggageDirectType(
        int segmentNo, 
        int sequenceNo, 
        int luggageDirectStatus) {
        this.segmentNo = segmentNo;
        this.sequenceNo = sequenceNo;
        this.luggageDirectStatus = luggageDirectStatus;
    }

    public LuggageDirectType() {
    }

    @FieldDoc("行程序号(1，2,3)")
    @JsonProperty("SegmentNo")
    @XmlElement(name = "SegmentNo")
    private int segmentNo;

    @FieldDoc("行程内的航段号,与FlightRefType中的SequenceNo一致")
    @JsonProperty("SequenceNo")
    @XmlElement(name = "SequenceNo")
    private int sequenceNo;

    @FieldDoc("对应航班到达机场的直挂状态:1,允许直挂;2,不允许直挂;3,以航司客规为准")
    @JsonProperty("LuggageDirectStatus")
    @XmlElement(name = "LuggageDirectStatus")
    private int luggageDirectStatus;

    /**
     * 行程序号(1，2,3)
     */
    public int getSegmentNo() {
        return this.segmentNo;
    }

    public void setSegmentNo(int segmentNo) {
        this.segmentNo = segmentNo;
    }

    /**
     * 行程内的航段号,与FlightRefType中的SequenceNo一致
     */
    public int getSequenceNo() {
        return this.sequenceNo;
    }

    public void setSequenceNo(int sequenceNo) {
        this.sequenceNo = sequenceNo;
    }

    /**
     * 对应航班到达机场的直挂状态:1,允许直挂;2,不允许直挂;3,以航司客规为准
     */
    public int getLuggageDirectStatus() {
        return this.luggageDirectStatus;
    }

    public void setLuggageDirectStatus(int luggageDirectStatus) {
        this.luggageDirectStatus = luggageDirectStatus;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (int) this.segmentNo;
            case 1: return (int) this.sequenceNo;
            case 2: return (int) this.luggageDirectStatus;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.segmentNo = (int)fieldValue; break;
            case 1: this.sequenceNo = (int)fieldValue; break;
            case 2: this.luggageDirectStatus = (int)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final LuggageDirectType other = (LuggageDirectType)obj;
        return
            Objects.equal(this.segmentNo, other.segmentNo) && 
            Objects.equal(this.sequenceNo, other.sequenceNo) && 
            Objects.equal(this.luggageDirectStatus, other.luggageDirectStatus);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.segmentNo);
        result = 31 * result + Objects.hashCode(this.sequenceNo);
        result = 31 * result + Objects.hashCode(this.luggageDirectStatus);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("segmentNo", segmentNo)
            .add("sequenceNo", sequenceNo)
            .add("luggageDirectStatus", luggageDirectStatus)
            .toString();
    }
}