/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 机型图片信息
 */
@DtoDoc("机型图片信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "EquipmentPicType", propOrder = {
    "cabinClass",
    "pictureInfo"
})
@SuppressWarnings("all")
public class EquipmentPicType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"EquipmentPicType\",\"namespace\":\"" + EquipmentPicType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"cabinClass\",\"type\":[{\"type\":\"enum\",\"name\":\"CabinClassType\",\"namespace\":\"" + CabinClassType.class.getPackage().getName() + "\",\"symbols\":[\"Economy\",\"Premium\",\"Business\",\"First\"]},\"null\"]},{\"name\":\"pictureInfo\",\"type\":{\"type\":\"record\",\"name\":\"PicType\",\"namespace\":\"" + PicType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"picSmall\",\"type\":[\"string\",\"null\"]},{\"name\":\"picLarge\",\"type\":[\"string\",\"null\"]},{\"name\":\"title\",\"type\":[\"string\",\"null\"]},{\"name\":\"desc\",\"type\":[\"string\",\"null\"]}]}}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public EquipmentPicType(
        CabinClassType cabinClass, 
        PicType pictureInfo) {
        this.cabinClass = cabinClass;
        this.pictureInfo = pictureInfo;
    }

    public EquipmentPicType() {
    }

    @FieldDoc("此图片适用的舱等，null表示适用所有舱等")
    @JsonProperty("CabinClass")
    @XmlElement(name = "CabinClass", nillable = true)
    private CabinClassType cabinClass;

    @FieldDoc("图片信息")
    @JsonProperty("PictureInfo")
    @XmlElement(name = "PictureInfo", nillable = true)
    private PicType pictureInfo;

    /**
     * 此图片适用的舱等，null表示适用所有舱等
     */
    public CabinClassType getCabinClass() {
        return this.cabinClass;
    }

    public void setCabinClass(CabinClassType cabinClass) {
        this.cabinClass = cabinClass;
    }

    /**
     * 图片信息
     */
    public PicType getPictureInfo() {
        return this.pictureInfo;
    }

    public void setPictureInfo(PicType pictureInfo) {
        this.pictureInfo = pictureInfo;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (CabinClassType) this.cabinClass;
            case 1: return (PicType) this.pictureInfo;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.cabinClass = (CabinClassType)fieldValue; break;
            case 1: this.pictureInfo = (PicType)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final EquipmentPicType other = (EquipmentPicType)obj;
        return
            Objects.equal(this.cabinClass, other.cabinClass) && 
            Objects.equal(this.pictureInfo, other.pictureInfo);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.cabinClass);
        result = 31 * result + Objects.hashCode(this.pictureInfo);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("cabinClass", cabinClass)
            .add("pictureInfo", pictureInfo)
            .toString();
    }
}