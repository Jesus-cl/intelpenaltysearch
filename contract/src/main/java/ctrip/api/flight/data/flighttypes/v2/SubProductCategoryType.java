// Generated by eBay Common SDK Platform
package ctrip.api.flight.data.flighttypes.v2;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlEnumValue;

/**
 * 
 *         子产品类型
 *         None：无
 *         Owner：自有政策
 *         Platforms：平台供应商政策
 *         Overseas : 境外供应商政策
 *         PlatformsPrivate : 平台供应商对赌政策
 *         OverseasPrivate  : 境外供应商对赌政策
 *         Pseat ： ZY-WS自有政策
 *         RTSeat ： ZY-WS供应商政策
 *         CSD : 供应商直连私有政策
 *         CSDPrivate : 供应商直连公转私政策
 *         CSDPublish : 供应商公布政策
 *         Airline : 航司直销
 *         LowestPrice : 廉价航司
 *         KWPrivate : 控位供应商政策
 *         OSeat : ZY-WS特惠
 *       
 */
@XmlType(name = "SubProductCategoryType")
@XmlEnum
@SuppressWarnings("all")
public enum SubProductCategoryType {

    @XmlEnumValue("None")
    None(0, "None"),

    @XmlEnumValue("Owner")
    Owner(1, "Owner"),

    @XmlEnumValue("Platforms")
    Platforms(2, "Platforms"),

    @XmlEnumValue("Overseas")
    Overseas(3, "Overseas"),

    @XmlEnumValue("PlatformsPrivate")
    PlatformsPrivate(4, "PlatformsPrivate"),

    @XmlEnumValue("OverseasPrivate")
    OverseasPrivate(5, "OverseasPrivate"),

    @XmlEnumValue("Pseat")
    Pseat(6, "Pseat"),

    @XmlEnumValue("RTSeat")
    RTSeat(7, "RTSeat"),

    @XmlEnumValue("CSD")
    CSD(8, "CSD"),

    @XmlEnumValue("CSDPrivate")
    CSDPrivate(9, "CSDPrivate"),

    @XmlEnumValue("CSDPublish")
    CSDPublish(10, "CSDPublish"),

    @XmlEnumValue("Airline")
    Airline(11, "Airline"),

    @XmlEnumValue("LowestPrice")
    LowestPrice(12, "LowestPrice"),

    @XmlEnumValue("KWPrivate")
    KWPrivate(13, "KWPrivate"),

    @XmlEnumValue("OSeat")
    OSeat(14, "OSeat");

    private final int intValue;
    private final String value;

    SubProductCategoryType(int intValue, String value) {
        this.intValue = intValue;
        this.value = value;
    }

    public int getValue() {
        return intValue;
    }

    @JsonValue
    public String value() {
        return value;
    }

    @JsonCreator
    public static SubProductCategoryType fromValue(String v) {
        for (SubProductCategoryType e: SubProductCategoryType.values()) {
            if (e.value.equals(v)) {
                return e;
            }
        }
        throw new IllegalArgumentException(v);
    }

    public static SubProductCategoryType findByValue(int value) {
        switch (value) {
            case 0:
                return None;
            case 1:
                return Owner;
            case 2:
                return Platforms;
            case 3:
                return Overseas;
            case 4:
                return PlatformsPrivate;
            case 5:
                return OverseasPrivate;
            case 6:
                return Pseat;
            case 7:
                return RTSeat;
            case 8:
                return CSD;
            case 9:
                return CSDPrivate;
            case 10:
                return CSDPublish;
            case 11:
                return Airline;
            case 12:
                return LowestPrice;
            case 13:
                return KWPrivate;
            case 14:
                return OSeat;
            default:
                return null;
        }
    }
}