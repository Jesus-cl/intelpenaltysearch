/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 基础价格
 */
@DtoDoc("基础价格")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PriceDetailType", propOrder = {
    "currency",
    "salePrice",
    "tax",
    "publishPrice",
    "accountPrice",
    "netPrice"
})
@SuppressWarnings("all")
public class PriceDetailType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"PriceDetailType\",\"namespace\":\"" + PriceDetailType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"currency\",\"type\":[\"string\",\"null\"]},{\"name\":\"salePrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"tax\",\"type\":[\"string\",\"null\"]},{\"name\":\"publishPrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"accountPrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"netPrice\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public PriceDetailType(
        String currency, 
        BigDecimal salePrice, 
        BigDecimal tax, 
        BigDecimal publishPrice, 
        BigDecimal accountPrice, 
        BigDecimal netPrice) {
        this.currency = currency;
        this.salePrice = salePrice;
        this.tax = tax;
        this.publishPrice = publishPrice;
        this.accountPrice = accountPrice;
        this.netPrice = netPrice;
    }

    public PriceDetailType() {
    }

    @FieldDoc("*币种")
    @JsonProperty("Currency")
    @XmlElement(name = "Currency")
    private String currency;

    @FieldDoc("*携程卖价")
    @JsonProperty("SalePrice")
    @XmlElement(name = "SalePrice")
    private BigDecimal salePrice;

    @FieldDoc("*税费")
    @JsonProperty("Tax")
    @XmlElement(name = "Tax")
    private BigDecimal tax;

    @FieldDoc("*航空公司卖价(含附加费)，列表查询不输出")
    @JsonProperty("PublishPrice")
    @XmlElement(name = "PublishPrice")
    private BigDecimal publishPrice;

    @FieldDoc("*航空公司结算价，列表查询不输出")
    @JsonProperty("AccountPrice")
    @XmlElement(name = "AccountPrice")
    private BigDecimal accountPrice;

    @FieldDoc("中间变量低价（包含后返），列表查询不输出")
    @JsonProperty("NetPrice")
    @XmlElement(name = "NetPrice")
    private BigDecimal netPrice;

    /**
     * *币种
     */
    public String getCurrency() {
        return this.currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    /**
     * *携程卖价
     */
    public BigDecimal getSalePrice() {
        return this.salePrice;
    }

    public void setSalePrice(BigDecimal salePrice) {
        this.salePrice = salePrice;
    }

    /**
     * *税费
     */
    public BigDecimal getTax() {
        return this.tax;
    }

    public void setTax(BigDecimal tax) {
        this.tax = tax;
    }

    /**
     * *航空公司卖价(含附加费)，列表查询不输出
     */
    public BigDecimal getPublishPrice() {
        return this.publishPrice;
    }

    public void setPublishPrice(BigDecimal publishPrice) {
        this.publishPrice = publishPrice;
    }

    /**
     * *航空公司结算价，列表查询不输出
     */
    public BigDecimal getAccountPrice() {
        return this.accountPrice;
    }

    public void setAccountPrice(BigDecimal accountPrice) {
        this.accountPrice = accountPrice;
    }

    /**
     * 中间变量低价（包含后返），列表查询不输出
     */
    public BigDecimal getNetPrice() {
        return this.netPrice;
    }

    public void setNetPrice(BigDecimal netPrice) {
        this.netPrice = netPrice;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.currency;
            case 1: return TypeConverter.convert(this.salePrice, String.class);
            case 2: return TypeConverter.convert(this.tax, String.class);
            case 3: return TypeConverter.convert(this.publishPrice, String.class);
            case 4: return TypeConverter.convert(this.accountPrice, String.class);
            case 5: return TypeConverter.convert(this.netPrice, String.class);
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.currency = (String)fieldValue; break;
            case 1: this.salePrice = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 2: this.tax = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 3: this.publishPrice = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 4: this.accountPrice = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 5: this.netPrice = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final PriceDetailType other = (PriceDetailType)obj;
        return
            Objects.equal(this.currency, other.currency) && 
            Objects.equal(this.salePrice, other.salePrice) && 
            Objects.equal(this.tax, other.tax) && 
            Objects.equal(this.publishPrice, other.publishPrice) && 
            Objects.equal(this.accountPrice, other.accountPrice) && 
            Objects.equal(this.netPrice, other.netPrice);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.currency);
        result = 31 * result + Objects.hashCode(this.salePrice);
        result = 31 * result + Objects.hashCode(this.tax);
        result = 31 * result + Objects.hashCode(this.publishPrice);
        result = 31 * result + Objects.hashCode(this.accountPrice);
        result = 31 * result + Objects.hashCode(this.netPrice);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("currency", currency)
            .add("salePrice", salePrice)
            .add("tax", tax)
            .add("publishPrice", publishPrice)
            .add("accountPrice", accountPrice)
            .add("netPrice", netPrice)
            .toString();
    }
}