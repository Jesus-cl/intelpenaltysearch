/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 行李额
 */
@DtoDoc("行李额")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "BaggageDetailType", propOrder = {
    "amount",
    "unit",
    "type"
})
@SuppressWarnings("all")
public class BaggageDetailType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"BaggageDetailType\",\"namespace\":\"" + BaggageDetailType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"unit\",\"type\":[\"string\",\"null\"]},{\"name\":\"type\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public BaggageDetailType(
        int amount, 
        String unit, 
        String type) {
        this.amount = amount;
        this.unit = unit;
        this.type = type;
    }

    public BaggageDetailType() {
    }

    @FieldDoc("数量")
    @JsonProperty("Amount")
    @XmlElement(name = "Amount")
    private int amount;

    @FieldDoc("数量单位")
    @JsonProperty("Unit")
    @XmlElement(name = "Unit")
    private String unit;

    @FieldDoc("单位标识")
    @JsonProperty("Type")
    @XmlElement(name = "Type")
    private String type;

    /**
     * 数量
     */
    public int getAmount() {
        return this.amount;
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }

    /**
     * 数量单位
     */
    public String getUnit() {
        return this.unit;
    }

    public void setUnit(String unit) {
        this.unit = unit;
    }

    /**
     * 单位标识
     */
    public String getType() {
        return this.type;
    }

    public void setType(String type) {
        this.type = type;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (int) this.amount;
            case 1: return (String) this.unit;
            case 2: return (String) this.type;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.amount = (int)fieldValue; break;
            case 1: this.unit = (String)fieldValue; break;
            case 2: this.type = (String)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final BaggageDetailType other = (BaggageDetailType)obj;
        return
            Objects.equal(this.amount, other.amount) && 
            Objects.equal(this.unit, other.unit) && 
            Objects.equal(this.type, other.type);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.amount);
        result = 31 * result + Objects.hashCode(this.unit);
        result = 31 * result + Objects.hashCode(this.type);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("amount", amount)
            .add("unit", unit)
            .add("type", type)
            .toString();
    }
}