/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlType;

/**
 * 价格实体
 */
@DtoDoc("价格实体")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PriceInfoType", propOrder = {
    "travelerCategoryCode",
    "agency",
    "ticketRemark",
    "ticketingTimeLimit",
    "passengerRestriction",
    "priceDetail",
    "originalPriceDetail",
    "expression",
    "exchange",
    "officeNo",
    "tagList",
    "commitionSource",
    "discountPrice"
})
@SuppressWarnings("all")
public class PriceInfoType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"PriceInfoType\",\"namespace\":\"" + PriceInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"travelerCategoryCode\",\"type\":[{\"type\":\"enum\",\"name\":\"TravelerCategoryCodeType\",\"namespace\":\"" + TravelerCategoryCodeType.class.getPackage().getName() + "\",\"symbols\":[\"Adult\",\"Child\",\"InfantInLap\",\"InfantInSeat\",\"Senior\"]},\"null\"]},{\"name\":\"agency\",\"type\":{\"type\":\"record\",\"name\":\"AgencyType\",\"namespace\":\"" + AgencyType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"agencyID\",\"type\":\"int\"},{\"name\":\"agencyCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"cityID\",\"type\":\"int\"},{\"name\":\"cityCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"agencyName\",\"type\":[\"string\",\"null\"]},{\"name\":\"officialName\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"ticketRemark\",\"type\":[\"string\",\"null\"]},{\"name\":\"ticketingTimeLimit\",\"type\":{\"type\":\"record\",\"name\":\"TicketingTimeLimitType\",\"namespace\":\"" + TicketingTimeLimitType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"timeLimitType\",\"type\":\"int\"},{\"name\":\"limitTime\",\"type\":\"int\"}]}},{\"name\":\"passengerRestriction\",\"type\":{\"type\":\"record\",\"name\":\"PassengerRestrictionType\",\"namespace\":\"" + PassengerRestrictionType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"minPassengerCount\",\"type\":\"int\"},{\"name\":\"maxPassengerCount\",\"type\":\"int\"},{\"name\":\"nationalityInclude\",\"type\":[\"string\",\"null\"]},{\"name\":\"nationalityExclude\",\"type\":[\"string\",\"null\"]},{\"name\":\"nationalityIncludeCN\",\"type\":[\"string\",\"null\"]},{\"name\":\"nationalityExcludeCN\",\"type\":[\"string\",\"null\"]},{\"name\":\"maxAgeLimitition\",\"type\":\"int\"},{\"name\":\"minAgeLimitition\",\"type\":\"int\"}]}},{\"name\":\"priceDetail\",\"type\":{\"type\":\"record\",\"name\":\"PriceDetailType\",\"namespace\":\"" + PriceDetailType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"currency\",\"type\":[\"string\",\"null\"]},{\"name\":\"salePrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"tax\",\"type\":[\"string\",\"null\"]},{\"name\":\"publishPrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"accountPrice\",\"type\":[\"string\",\"null\"]},{\"name\":\"netPrice\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"originalPriceDetail\",\"type\":\"PriceDetailType\"},{\"name\":\"expression\",\"type\":[\"string\",\"null\"]},{\"name\":\"exchange\",\"type\":[\"string\",\"null\"]},{\"name\":\"officeNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"tagList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TagType\",\"namespace\":\"" + TagType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"key\",\"type\":[\"string\",\"null\"]},{\"name\":\"value\",\"type\":[\"string\",\"null\"]}]}}},{\"name\":\"commitionSource\",\"type\":\"int\"},{\"name\":\"discountPrice\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public PriceInfoType(
        TravelerCategoryCodeType travelerCategoryCode, 
        AgencyType agency, 
        String ticketRemark, 
        TicketingTimeLimitType ticketingTimeLimit, 
        PassengerRestrictionType passengerRestriction, 
        PriceDetailType priceDetail, 
        PriceDetailType originalPriceDetail, 
        String expression, 
        BigDecimal exchange, 
        String officeNo, 
        List<TagType> tagList, 
        int commitionSource, 
        BigDecimal discountPrice) {
        this.travelerCategoryCode = travelerCategoryCode;
        this.agency = agency;
        this.ticketRemark = ticketRemark;
        this.ticketingTimeLimit = ticketingTimeLimit;
        this.passengerRestriction = passengerRestriction;
        this.priceDetail = priceDetail;
        this.originalPriceDetail = originalPriceDetail;
        this.expression = expression;
        this.exchange = exchange;
        this.officeNo = officeNo;
        this.tagList = tagList;
        this.commitionSource = commitionSource;
        this.discountPrice = discountPrice;
    }

    public PriceInfoType() {
    }

    @FieldDoc("*乘客类型")
    @JsonProperty("TravelerCategoryCode")
    @XmlElement(name = "TravelerCategoryCode")
    private TravelerCategoryCodeType travelerCategoryCode;

    @FieldDoc("*票台城市信息实体")
    @JsonProperty("Agency")
    @XmlElement(name = "Agency")
    private AgencyType agency;

    @FieldDoc("出票备注")
    @JsonProperty("TicketRemark")
    @XmlElement(name = "TicketRemark")
    private String ticketRemark;

    @FieldDoc("出票保护时限")
    @JsonProperty("TicketingTimeLimit")
    @XmlElement(name = "TicketingTimeLimit")
    private TicketingTimeLimitType ticketingTimeLimit;

    @FieldDoc("乘客限制")
    @JsonProperty("PassengerRestriction")
    @XmlElement(name = "PassengerRestriction")
    private PassengerRestrictionType passengerRestriction;

    @FieldDoc("以CNY为币种的价格。若为空，表示原始币种为CNY")
    @JsonProperty("PriceDetail")
    @XmlElement(name = "PriceDetail")
    private PriceDetailType priceDetail;

    @FieldDoc("*原始币种的价格")
    @JsonProperty("OriginalPriceDetail")
    @XmlElement(name = "OriginalPriceDetail")
    private PriceDetailType originalPriceDetail;

    @FieldDoc("横式(大系统)")
    @JsonProperty("Expression")
    @XmlElement(name = "Expression")
    private String expression;

    @FieldDoc("*汇率")
    @JsonProperty("Exchange")
    @XmlElement(name = "Exchange")
    private BigDecimal exchange;

    @FieldDoc("票台绑定OfficeNo(春秋、TF、包座、捷星无OfficeNo)")
    @JsonProperty("OfficeNo")
    @XmlElement(name = "OfficeNo")
    private String officeNo;

    @JsonProperty("TagList")
    @XmlElement(name = "Tag")
    @XmlElementWrapper(name = "TagList")
    private List<TagType> tagList;

    @FieldDoc("CommitionSource")
    @JsonProperty("CommitionSource")
    @XmlElement(name = "CommitionSource")
    private int commitionSource;

    @FieldDoc("PC码优惠金额")
    @JsonProperty("DiscountPrice")
    @XmlElement(name = "DiscountPrice")
    private BigDecimal discountPrice;

    /**
     * *乘客类型
     */
    public TravelerCategoryCodeType getTravelerCategoryCode() {
        return this.travelerCategoryCode;
    }

    public void setTravelerCategoryCode(TravelerCategoryCodeType travelerCategoryCode) {
        this.travelerCategoryCode = travelerCategoryCode;
    }

    /**
     * *票台城市信息实体
     */
    public AgencyType getAgency() {
        return this.agency;
    }

    public void setAgency(AgencyType agency) {
        this.agency = agency;
    }

    /**
     * 出票备注
     */
    public String getTicketRemark() {
        return this.ticketRemark;
    }

    public void setTicketRemark(String ticketRemark) {
        this.ticketRemark = ticketRemark;
    }

    /**
     * 出票保护时限
     */
    public TicketingTimeLimitType getTicketingTimeLimit() {
        return this.ticketingTimeLimit;
    }

    public void setTicketingTimeLimit(TicketingTimeLimitType ticketingTimeLimit) {
        this.ticketingTimeLimit = ticketingTimeLimit;
    }

    /**
     * 乘客限制
     */
    public PassengerRestrictionType getPassengerRestriction() {
        return this.passengerRestriction;
    }

    public void setPassengerRestriction(PassengerRestrictionType passengerRestriction) {
        this.passengerRestriction = passengerRestriction;
    }

    /**
     * 以CNY为币种的价格。若为空，表示原始币种为CNY
     */
    public PriceDetailType getPriceDetail() {
        return this.priceDetail;
    }

    public void setPriceDetail(PriceDetailType priceDetail) {
        this.priceDetail = priceDetail;
    }

    /**
     * *原始币种的价格
     */
    public PriceDetailType getOriginalPriceDetail() {
        return this.originalPriceDetail;
    }

    public void setOriginalPriceDetail(PriceDetailType originalPriceDetail) {
        this.originalPriceDetail = originalPriceDetail;
    }

    /**
     * 横式(大系统)
     */
    public String getExpression() {
        return this.expression;
    }

    public void setExpression(String expression) {
        this.expression = expression;
    }

    /**
     * *汇率
     */
    public BigDecimal getExchange() {
        return this.exchange;
    }

    public void setExchange(BigDecimal exchange) {
        this.exchange = exchange;
    }

    /**
     * 票台绑定OfficeNo(春秋、TF、包座、捷星无OfficeNo)
     */
    public String getOfficeNo() {
        return this.officeNo;
    }

    public void setOfficeNo(String officeNo) {
        this.officeNo = officeNo;
    }

    public List<TagType> getTagList() {
        return this.tagList;
    }

    public void setTagList(List<TagType> tagList) {
        this.tagList = tagList;
    }

    /**
     * CommitionSource
     */
    public int getCommitionSource() {
        return this.commitionSource;
    }

    public void setCommitionSource(int commitionSource) {
        this.commitionSource = commitionSource;
    }

    /**
     * PC码优惠金额
     */
    public BigDecimal getDiscountPrice() {
        return this.discountPrice;
    }

    public void setDiscountPrice(BigDecimal discountPrice) {
        this.discountPrice = discountPrice;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (TravelerCategoryCodeType) this.travelerCategoryCode;
            case 1: return (AgencyType) this.agency;
            case 2: return (String) this.ticketRemark;
            case 3: return (TicketingTimeLimitType) this.ticketingTimeLimit;
            case 4: return (PassengerRestrictionType) this.passengerRestriction;
            case 5: return (PriceDetailType) this.priceDetail;
            case 6: return (PriceDetailType) this.originalPriceDetail;
            case 7: return (String) this.expression;
            case 8: return TypeConverter.convert(this.exchange, String.class);
            case 9: return (String) this.officeNo;
            case 10: return (List<TagType>) this.tagList;
            case 11: return (int) this.commitionSource;
            case 12: return TypeConverter.convert(this.discountPrice, String.class);
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.travelerCategoryCode = (TravelerCategoryCodeType)fieldValue; break;
            case 1: this.agency = (AgencyType)fieldValue; break;
            case 2: this.ticketRemark = (String)fieldValue; break;
            case 3: this.ticketingTimeLimit = (TicketingTimeLimitType)fieldValue; break;
            case 4: this.passengerRestriction = (PassengerRestrictionType)fieldValue; break;
            case 5: this.priceDetail = (PriceDetailType)fieldValue; break;
            case 6: this.originalPriceDetail = (PriceDetailType)fieldValue; break;
            case 7: this.expression = (String)fieldValue; break;
            case 8: this.exchange = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 9: this.officeNo = (String)fieldValue; break;
            case 10: this.tagList = (List<TagType>)fieldValue; break;
            case 11: this.commitionSource = (int)fieldValue; break;
            case 12: this.discountPrice = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final PriceInfoType other = (PriceInfoType)obj;
        return
            Objects.equal(this.travelerCategoryCode, other.travelerCategoryCode) && 
            Objects.equal(this.agency, other.agency) && 
            Objects.equal(this.ticketRemark, other.ticketRemark) && 
            Objects.equal(this.ticketingTimeLimit, other.ticketingTimeLimit) && 
            Objects.equal(this.passengerRestriction, other.passengerRestriction) && 
            Objects.equal(this.priceDetail, other.priceDetail) && 
            Objects.equal(this.originalPriceDetail, other.originalPriceDetail) && 
            Objects.equal(this.expression, other.expression) && 
            Objects.equal(this.exchange, other.exchange) && 
            Objects.equal(this.officeNo, other.officeNo) && 
            Objects.equal(this.tagList, other.tagList) && 
            Objects.equal(this.commitionSource, other.commitionSource) && 
            Objects.equal(this.discountPrice, other.discountPrice);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.travelerCategoryCode);
        result = 31 * result + Objects.hashCode(this.agency);
        result = 31 * result + Objects.hashCode(this.ticketRemark);
        result = 31 * result + Objects.hashCode(this.ticketingTimeLimit);
        result = 31 * result + Objects.hashCode(this.passengerRestriction);
        result = 31 * result + Objects.hashCode(this.priceDetail);
        result = 31 * result + Objects.hashCode(this.originalPriceDetail);
        result = 31 * result + Objects.hashCode(this.expression);
        result = 31 * result + Objects.hashCode(this.exchange);
        result = 31 * result + Objects.hashCode(this.officeNo);
        result = 31 * result + Objects.hashCode(this.tagList);
        result = 31 * result + Objects.hashCode(this.commitionSource);
        result = 31 * result + Objects.hashCode(this.discountPrice);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("travelerCategoryCode", travelerCategoryCode)
            .add("agency", agency)
            .add("ticketRemark", ticketRemark)
            .add("ticketingTimeLimit", ticketingTimeLimit)
            .add("passengerRestriction", passengerRestriction)
            .add("priceDetail", priceDetail)
            .add("originalPriceDetail", originalPriceDetail)
            .add("expression", expression)
            .add("exchange", exchange)
            .add("officeNo", officeNo)
            .add("tagList", tagList)
            .add("commitionSource", commitionSource)
            .add("discountPrice", discountPrice)
            .toString();
    }
}