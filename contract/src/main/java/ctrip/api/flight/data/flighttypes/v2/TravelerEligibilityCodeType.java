// Generated by eBay Common SDK Platform
package ctrip.api.flight.data.flighttypes.v2;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlEnumValue;

/**
 * 
 *         乘客资质：
 *         ALL 全部
 *         ADT普通成人
 *         CHD儿童
 *         EMI移民
 *         LAB劳务人员
 *         NEW新移民
 *         SEA海员
 *         SRC老年人
 *         STU学生
 *         TAI台商
 *         VFR探亲访友
 *         WOM女士
 *         YTH青年
 *       
 */
@XmlType(name = "TravelerEligibilityCodeType")
@XmlEnum
@SuppressWarnings("all")
public enum TravelerEligibilityCodeType {

    @XmlEnumValue("ALL")
    ALL(0, "ALL"),

    @XmlEnumValue("ADT")
    ADT(1, "ADT"),

    @XmlEnumValue("CHD")
    CHD(2, "CHD"),

    @XmlEnumValue("EMI")
    EMI(3, "EMI"),

    @XmlEnumValue("LAB")
    LAB(4, "LAB"),

    @XmlEnumValue("NEW")
    NEW(5, "NEW"),

    @XmlEnumValue("SEA")
    SEA(6, "SEA"),

    @XmlEnumValue("SRC")
    SRC(7, "SRC"),

    @XmlEnumValue("STU")
    STU(8, "STU"),

    @XmlEnumValue("TAI")
    TAI(9, "TAI"),

    @XmlEnumValue("VFR")
    VFR(10, "VFR"),

    @XmlEnumValue("WOM")
    WOM(11, "WOM"),

    @XmlEnumValue("YTH")
    YTH(12, "YTH");

    private final int intValue;
    private final String value;

    TravelerEligibilityCodeType(int intValue, String value) {
        this.intValue = intValue;
        this.value = value;
    }

    public int getValue() {
        return intValue;
    }

    @JsonValue
    public String value() {
        return value;
    }

    @JsonCreator
    public static TravelerEligibilityCodeType fromValue(String v) {
        for (TravelerEligibilityCodeType e: TravelerEligibilityCodeType.values()) {
            if (e.value.equals(v)) {
                return e;
            }
        }
        throw new IllegalArgumentException(v);
    }

    public static TravelerEligibilityCodeType findByValue(int value) {
        switch (value) {
            case 0:
                return ALL;
            case 1:
                return ADT;
            case 2:
                return CHD;
            case 3:
                return EMI;
            case 4:
                return LAB;
            case 5:
                return NEW;
            case 6:
                return SEA;
            case 7:
                return SRC;
            case 8:
                return STU;
            case 9:
                return TAI;
            case 10:
                return VFR;
            case 11:
                return WOM;
            case 12:
                return YTH;
            default:
                return null;
        }
    }
}