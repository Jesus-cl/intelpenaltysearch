/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.util.Calendar;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         航班信息
 *         FlightID：航班索引ID
 *         Carrier：票面航空公司
 *         FlightNumber：票面航空公司航班号
 *         Alliance：票面航空公司所属联盟
 *         OperatingCarrier：承运航空公司
 *         OperatingFlightNumber：承运航空公司航班号
 *         OperatingAlliance：承运航空公司所属联盟
 *         DepartureCity：出发城市
 *         ArrivalCity：到达城市
 *         DepartureAirport：出发机场
 *         ArrivalAirport：到达机场
 *         TakeoffDateTime：出发日期时间
 *         ArrivalDateTime：到达日期时间
 *         EquipementCode：机型代码
 *         StopList：经停信息
 *         Duration：飞行时长
 *         ArrivalDays：到底天数
 *         SeatCountList：舱位信息
 *         EquipementPicList：机型图片URL列表，只在无线详情查询时返回
 *         ProductStoreId:产品库存ID
 *       
 */
@DtoDoc("航班信息" +
        "FlightID：航班索引ID" +
        "Carrier：票面航空公司" +
        "FlightNumber：票面航空公司航班号" +
        "Alliance：票面航空公司所属联盟" +
        "OperatingCarrier：承运航空公司" +
        "OperatingFlightNumber：承运航空公司航班号" +
        "OperatingAlliance：承运航空公司所属联盟" +
        "DepartureCity：出发城市" +
        "ArrivalCity：到达城市" +
        "DepartureAirport：出发机场" +
        "ArrivalAirport：到达机场" +
        "TakeoffDateTime：出发日期时间" +
        "ArrivalDateTime：到达日期时间" +
        "EquipementCode：机型代码" +
        "StopList：经停信息" +
        "Duration：飞行时长" +
        "ArrivalDays：到底天数" +
        "SeatCountList：舱位信息" +
        "EquipementPicList：机型图片URL列表，只在无线详情查询时返回" +
        "ProductStoreId:产品库存ID")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FlightType", propOrder = {
    "flightID",
    "marketingCarrier",
    "flightNo",
    "operatingCarrier",
    "operatingFlightNo",
    "departureCity",
    "arrivalCity",
    "departureAirport",
    "arrivalAirport",
    "takeoffDateTime",
    "arrivalDateTime",
    "equipmentCode",
    "stopList",
    "duration",
    "arrivalDays",
    "tagList"
})
@SuppressWarnings("all")
public class FlightType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"FlightType\",\"namespace\":\"" + FlightType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"flightID\",\"type\":[\"string\",\"null\"]},{\"name\":\"marketingCarrier\",\"type\":{\"type\":\"record\",\"name\":\"AirlineInfoType\",\"namespace\":\"" + AirlineInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"airlineCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"airlineName\",\"type\":[\"string\",\"null\"]},{\"name\":\"alliance\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"flightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"operatingCarrier\",\"type\":\"AirlineInfoType\"},{\"name\":\"operatingFlightNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"departureCity\",\"type\":{\"type\":\"record\",\"name\":\"CityInfoType\",\"namespace\":\"" + CityInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"cityID\",\"type\":\"int\"},{\"name\":\"cityCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"cityName\",\"type\":[\"string\",\"null\"]},{\"name\":\"cityNameEN\",\"type\":[\"string\",\"null\"]},{\"name\":\"provinceID\",\"type\":\"int\"},{\"name\":\"countryID\",\"type\":\"int\"},{\"name\":\"countryName\",\"type\":[\"string\",\"null\"]},{\"name\":\"countryNameEN\",\"type\":[\"string\",\"null\"]},{\"name\":\"isDomestic\",\"type\":\"boolean\"}]}},{\"name\":\"arrivalCity\",\"type\":\"CityInfoType\"},{\"name\":\"departureAirport\",\"type\":{\"type\":\"record\",\"name\":\"AirportInfoType\",\"namespace\":\"" + AirportInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"terminal\",\"type\":[\"string\",\"null\"]},{\"name\":\"portCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"portName\",\"type\":[\"string\",\"null\"]},{\"name\":\"portNameEN\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"arrivalAirport\",\"type\":\"AirportInfoType\"},{\"name\":\"takeoffDateTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"arrivalDateTime\",\"type\":[\"datetime\",\"null\"]},{\"name\":\"equipmentCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"stopList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"StopType\",\"namespace\":\"" + StopType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"airport\",\"type\":[\"string\",\"null\"]},{\"name\":\"duration\",\"type\":[\"string\",\"null\"]}]}}},{\"name\":\"duration\",\"type\":\"int\"},{\"name\":\"arrivalDays\",\"type\":\"int\"},{\"name\":\"tagList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TagType\",\"namespace\":\"" + TagType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"key\",\"type\":[\"string\",\"null\"]},{\"name\":\"value\",\"type\":[\"string\",\"null\"]}]}}}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public FlightType(
        String flightID, 
        AirlineInfoType marketingCarrier, 
        String flightNo, 
        AirlineInfoType operatingCarrier, 
        String operatingFlightNo, 
        CityInfoType departureCity, 
        CityInfoType arrivalCity, 
        AirportInfoType departureAirport, 
        AirportInfoType arrivalAirport, 
        Calendar takeoffDateTime, 
        Calendar arrivalDateTime, 
        String equipmentCode, 
        List<StopType> stopList, 
        int duration, 
        int arrivalDays, 
        List<TagType> tagList) {
        this.flightID = flightID;
        this.marketingCarrier = marketingCarrier;
        this.flightNo = flightNo;
        this.operatingCarrier = operatingCarrier;
        this.operatingFlightNo = operatingFlightNo;
        this.departureCity = departureCity;
        this.arrivalCity = arrivalCity;
        this.departureAirport = departureAirport;
        this.arrivalAirport = arrivalAirport;
        this.takeoffDateTime = takeoffDateTime;
        this.arrivalDateTime = arrivalDateTime;
        this.equipmentCode = equipmentCode;
        this.stopList = stopList;
        this.duration = duration;
        this.arrivalDays = arrivalDays;
        this.tagList = tagList;
    }

    public FlightType() {
    }

    @JsonProperty("FlightID")
    @XmlElement(name = "FlightID")
    private String flightID;

    @JsonProperty("MarketingCarrier")
    @XmlElement(name = "MarketingCarrier")
    private AirlineInfoType marketingCarrier;

    @JsonProperty("FlightNo")
    @XmlElement(name = "FlightNo")
    private String flightNo;

    @JsonProperty("OperatingCarrier")
    @XmlElement(name = "OperatingCarrier")
    private AirlineInfoType operatingCarrier;

    @JsonProperty("OperatingFlightNo")
    @XmlElement(name = "OperatingFlightNo")
    private String operatingFlightNo;

    @JsonProperty("DepartureCity")
    @XmlElement(name = "DepartureCity")
    private CityInfoType departureCity;

    @JsonProperty("ArrivalCity")
    @XmlElement(name = "ArrivalCity")
    private CityInfoType arrivalCity;

    @JsonProperty("DepartureAirport")
    @XmlElement(name = "DepartureAirport")
    private AirportInfoType departureAirport;

    @JsonProperty("ArrivalAirport")
    @XmlElement(name = "ArrivalAirport")
    private AirportInfoType arrivalAirport;

    @JsonProperty("TakeoffDateTime")
    @XmlElement(name = "TakeoffDateTime")
    private Calendar takeoffDateTime;

    @JsonProperty("ArrivalDateTime")
    @XmlElement(name = "ArrivalDateTime")
    private Calendar arrivalDateTime;

    @JsonProperty("EquipmentCode")
    @XmlElement(name = "EquipmentCode")
    private String equipmentCode;

    @JsonProperty("StopList")
    @XmlElement(name = "Stop")
    @XmlElementWrapper(name = "StopList")
    private List<StopType> stopList;

    @JsonProperty("Duration")
    @XmlElement(name = "Duration")
    private int duration;

    @JsonProperty("ArrivalDays")
    @XmlElement(name = "ArrivalDays")
    private int arrivalDays;

    @JsonProperty("TagList")
    @XmlElement(name = "Tag")
    @XmlElementWrapper(name = "TagList")
    private List<TagType> tagList;

    public String getFlightID() {
        return this.flightID;
    }

    public void setFlightID(String flightID) {
        this.flightID = flightID;
    }

    public AirlineInfoType getMarketingCarrier() {
        return this.marketingCarrier;
    }

    public void setMarketingCarrier(AirlineInfoType marketingCarrier) {
        this.marketingCarrier = marketingCarrier;
    }

    public String getFlightNo() {
        return this.flightNo;
    }

    public void setFlightNo(String flightNo) {
        this.flightNo = flightNo;
    }

    public AirlineInfoType getOperatingCarrier() {
        return this.operatingCarrier;
    }

    public void setOperatingCarrier(AirlineInfoType operatingCarrier) {
        this.operatingCarrier = operatingCarrier;
    }

    public String getOperatingFlightNo() {
        return this.operatingFlightNo;
    }

    public void setOperatingFlightNo(String operatingFlightNo) {
        this.operatingFlightNo = operatingFlightNo;
    }

    public CityInfoType getDepartureCity() {
        return this.departureCity;
    }

    public void setDepartureCity(CityInfoType departureCity) {
        this.departureCity = departureCity;
    }

    public CityInfoType getArrivalCity() {
        return this.arrivalCity;
    }

    public void setArrivalCity(CityInfoType arrivalCity) {
        this.arrivalCity = arrivalCity;
    }

    public AirportInfoType getDepartureAirport() {
        return this.departureAirport;
    }

    public void setDepartureAirport(AirportInfoType departureAirport) {
        this.departureAirport = departureAirport;
    }

    public AirportInfoType getArrivalAirport() {
        return this.arrivalAirport;
    }

    public void setArrivalAirport(AirportInfoType arrivalAirport) {
        this.arrivalAirport = arrivalAirport;
    }

    public Calendar getTakeoffDateTime() {
        return this.takeoffDateTime;
    }

    public void setTakeoffDateTime(Calendar takeoffDateTime) {
        this.takeoffDateTime = takeoffDateTime;
    }

    public Calendar getArrivalDateTime() {
        return this.arrivalDateTime;
    }

    public void setArrivalDateTime(Calendar arrivalDateTime) {
        this.arrivalDateTime = arrivalDateTime;
    }

    public String getEquipmentCode() {
        return this.equipmentCode;
    }

    public void setEquipmentCode(String equipmentCode) {
        this.equipmentCode = equipmentCode;
    }

    public List<StopType> getStopList() {
        return this.stopList;
    }

    public void setStopList(List<StopType> stopList) {
        this.stopList = stopList;
    }

    public int getDuration() {
        return this.duration;
    }

    public void setDuration(int duration) {
        this.duration = duration;
    }

    public int getArrivalDays() {
        return this.arrivalDays;
    }

    public void setArrivalDays(int arrivalDays) {
        this.arrivalDays = arrivalDays;
    }

    public List<TagType> getTagList() {
        return this.tagList;
    }

    public void setTagList(List<TagType> tagList) {
        this.tagList = tagList;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.flightID;
            case 1: return (AirlineInfoType) this.marketingCarrier;
            case 2: return (String) this.flightNo;
            case 3: return (AirlineInfoType) this.operatingCarrier;
            case 4: return (String) this.operatingFlightNo;
            case 5: return (CityInfoType) this.departureCity;
            case 6: return (CityInfoType) this.arrivalCity;
            case 7: return (AirportInfoType) this.departureAirport;
            case 8: return (AirportInfoType) this.arrivalAirport;
            case 9: return (Calendar) this.takeoffDateTime;
            case 10: return (Calendar) this.arrivalDateTime;
            case 11: return (String) this.equipmentCode;
            case 12: return (List<StopType>) this.stopList;
            case 13: return (int) this.duration;
            case 14: return (int) this.arrivalDays;
            case 15: return (List<TagType>) this.tagList;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.flightID = (String)fieldValue; break;
            case 1: this.marketingCarrier = (AirlineInfoType)fieldValue; break;
            case 2: this.flightNo = (String)fieldValue; break;
            case 3: this.operatingCarrier = (AirlineInfoType)fieldValue; break;
            case 4: this.operatingFlightNo = (String)fieldValue; break;
            case 5: this.departureCity = (CityInfoType)fieldValue; break;
            case 6: this.arrivalCity = (CityInfoType)fieldValue; break;
            case 7: this.departureAirport = (AirportInfoType)fieldValue; break;
            case 8: this.arrivalAirport = (AirportInfoType)fieldValue; break;
            case 9: this.takeoffDateTime = (Calendar)fieldValue; break;
            case 10: this.arrivalDateTime = (Calendar)fieldValue; break;
            case 11: this.equipmentCode = (String)fieldValue; break;
            case 12: this.stopList = (List<StopType>)fieldValue; break;
            case 13: this.duration = (int)fieldValue; break;
            case 14: this.arrivalDays = (int)fieldValue; break;
            case 15: this.tagList = (List<TagType>)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final FlightType other = (FlightType)obj;
        return
            Objects.equal(this.flightID, other.flightID) && 
            Objects.equal(this.marketingCarrier, other.marketingCarrier) && 
            Objects.equal(this.flightNo, other.flightNo) && 
            Objects.equal(this.operatingCarrier, other.operatingCarrier) && 
            Objects.equal(this.operatingFlightNo, other.operatingFlightNo) && 
            Objects.equal(this.departureCity, other.departureCity) && 
            Objects.equal(this.arrivalCity, other.arrivalCity) && 
            Objects.equal(this.departureAirport, other.departureAirport) && 
            Objects.equal(this.arrivalAirport, other.arrivalAirport) && 
            Objects.equal(this.takeoffDateTime, other.takeoffDateTime) && 
            Objects.equal(this.arrivalDateTime, other.arrivalDateTime) && 
            Objects.equal(this.equipmentCode, other.equipmentCode) && 
            Objects.equal(this.stopList, other.stopList) && 
            Objects.equal(this.duration, other.duration) && 
            Objects.equal(this.arrivalDays, other.arrivalDays) && 
            Objects.equal(this.tagList, other.tagList);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.flightID);
        result = 31 * result + Objects.hashCode(this.marketingCarrier);
        result = 31 * result + Objects.hashCode(this.flightNo);
        result = 31 * result + Objects.hashCode(this.operatingCarrier);
        result = 31 * result + Objects.hashCode(this.operatingFlightNo);
        result = 31 * result + Objects.hashCode(this.departureCity);
        result = 31 * result + Objects.hashCode(this.arrivalCity);
        result = 31 * result + Objects.hashCode(this.departureAirport);
        result = 31 * result + Objects.hashCode(this.arrivalAirport);
        result = 31 * result + Objects.hashCode(this.takeoffDateTime);
        result = 31 * result + Objects.hashCode(this.arrivalDateTime);
        result = 31 * result + Objects.hashCode(this.equipmentCode);
        result = 31 * result + Objects.hashCode(this.stopList);
        result = 31 * result + Objects.hashCode(this.duration);
        result = 31 * result + Objects.hashCode(this.arrivalDays);
        result = 31 * result + Objects.hashCode(this.tagList);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("flightID", flightID)
            .add("marketingCarrier", marketingCarrier)
            .add("flightNo", flightNo)
            .add("operatingCarrier", operatingCarrier)
            .add("operatingFlightNo", operatingFlightNo)
            .add("departureCity", departureCity)
            .add("arrivalCity", arrivalCity)
            .add("departureAirport", departureAirport)
            .add("arrivalAirport", arrivalAirport)
            .add("takeoffDateTime", takeoffDateTime)
            .add("arrivalDateTime", arrivalDateTime)
            .add("equipmentCode", equipmentCode)
            .add("stopList", stopList)
            .add("duration", duration)
            .add("arrivalDays", arrivalDays)
            .add("tagList", tagList)
            .toString();
    }
}