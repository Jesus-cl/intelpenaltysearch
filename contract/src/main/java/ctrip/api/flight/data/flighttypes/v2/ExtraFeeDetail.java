/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 附加费用详情
 */
@DtoDoc("附加费用详情")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ExtraFeeDetail", propOrder = {
    "carrierFee",
    "ctripFee",
    "consolidatorFee",
    "displayType"
})
@SuppressWarnings("all")
public class ExtraFeeDetail implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"ExtraFeeDetail\",\"namespace\":\"" + ExtraFeeDetail.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"carrierFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"ctripFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"consolidatorFee\",\"type\":[\"string\",\"null\"]},{\"name\":\"displayType\",\"type\":\"int\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public ExtraFeeDetail(
        BigDecimal carrierFee, 
        BigDecimal ctripFee, 
        BigDecimal consolidatorFee, 
        int displayType) {
        this.carrierFee = carrierFee;
        this.ctripFee = ctripFee;
        this.consolidatorFee = consolidatorFee;
        this.displayType = displayType;
    }

    public ExtraFeeDetail() {
    }

    @FieldDoc("航空公司服务费")
    @JsonProperty("CarrierFee")
    @XmlElement(name = "CarrierFee")
    private BigDecimal carrierFee;

    @FieldDoc("携程服务费")
    @JsonProperty("CtripFee")
    @XmlElement(name = "CtripFee")
    private BigDecimal ctripFee;

    @FieldDoc("合作票台服务费")
    @JsonProperty("ConsolidatorFee")
    @XmlElement(name = "ConsolidatorFee")
    private BigDecimal consolidatorFee;

    @FieldDoc("服务费展示类型， 1：合并，需合并到客规费中；2：分开，需以文字备注的形式展示")
    @JsonProperty("DisplayType")
    @XmlElement(name = "DisplayType")
    private int displayType;

    /**
     * 航空公司服务费
     */
    public BigDecimal getCarrierFee() {
        return this.carrierFee;
    }

    public void setCarrierFee(BigDecimal carrierFee) {
        this.carrierFee = carrierFee;
    }

    /**
     * 携程服务费
     */
    public BigDecimal getCtripFee() {
        return this.ctripFee;
    }

    public void setCtripFee(BigDecimal ctripFee) {
        this.ctripFee = ctripFee;
    }

    /**
     * 合作票台服务费
     */
    public BigDecimal getConsolidatorFee() {
        return this.consolidatorFee;
    }

    public void setConsolidatorFee(BigDecimal consolidatorFee) {
        this.consolidatorFee = consolidatorFee;
    }

    /**
     * 服务费展示类型， 1：合并，需合并到客规费中；2：分开，需以文字备注的形式展示
     */
    public int getDisplayType() {
        return this.displayType;
    }

    public void setDisplayType(int displayType) {
        this.displayType = displayType;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return TypeConverter.convert(this.carrierFee, String.class);
            case 1: return TypeConverter.convert(this.ctripFee, String.class);
            case 2: return TypeConverter.convert(this.consolidatorFee, String.class);
            case 3: return (int) this.displayType;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.carrierFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 1: this.ctripFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 2: this.consolidatorFee = TypeConverter.convert((String)fieldValue, BigDecimal.class); break;
            case 3: this.displayType = (int)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final ExtraFeeDetail other = (ExtraFeeDetail)obj;
        return
            Objects.equal(this.carrierFee, other.carrierFee) && 
            Objects.equal(this.ctripFee, other.ctripFee) && 
            Objects.equal(this.consolidatorFee, other.consolidatorFee) && 
            Objects.equal(this.displayType, other.displayType);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.carrierFee);
        result = 31 * result + Objects.hashCode(this.ctripFee);
        result = 31 * result + Objects.hashCode(this.consolidatorFee);
        result = 31 * result + Objects.hashCode(this.displayType);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("carrierFee", carrierFee)
            .add("ctripFee", ctripFee)
            .add("consolidatorFee", consolidatorFee)
            .add("displayType", displayType)
            .toString();
    }
}