/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 *         SegmentNo：行程段
 *         NonRefund：T:不可退；F：可退；H：有条件可退
 *         NonReroute：T:不可改；F：可改；H：有条件可改
 *         RefundRemarkID：返程退备注索引ID
 *         RerouteRemarkID：返程改备注索引ID
 *         NoShowRemarkID：误机描述信息索引ID
 *         RemarkID：备注信息索引ID
 *       
 */
@DtoDoc("SegmentNo：行程段" +
        "NonRefund：	T:不可退；F：可退；H：有条件可退" +
        "NonReroute：	T:不可改；F：可改；H：有条件可改" +
        "RefundRemarkID：返程退备注索引ID" +
        "RerouteRemarkID：返程改备注索引ID" +
        "NoShowRemarkID：误机描述信息索引ID" +
        "RemarkID：备注信息索引ID")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PenaltyRemarkType", propOrder = {
    "segmentNo",
    "nonRefund",
    "nonReroute",
    "refundRemarkID",
    "rerouteRemarkID",
    "noShowRemarkID",
    "remarkID"
})
@SuppressWarnings("all")
public class PenaltyRemarkType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"PenaltyRemarkType\",\"namespace\":\"" + PenaltyRemarkType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"segmentNo\",\"type\":\"int\"},{\"name\":\"nonRefund\",\"type\":[\"string\",\"null\"]},{\"name\":\"nonReroute\",\"type\":[\"string\",\"null\"]},{\"name\":\"refundRemarkID\",\"type\":[\"string\",\"null\"]},{\"name\":\"rerouteRemarkID\",\"type\":[\"string\",\"null\"]},{\"name\":\"noShowRemarkID\",\"type\":[\"string\",\"null\"]},{\"name\":\"remarkID\",\"type\":[\"string\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public PenaltyRemarkType(
        int segmentNo, 
        String nonRefund, 
        String nonReroute, 
        String refundRemarkID, 
        String rerouteRemarkID, 
        String noShowRemarkID, 
        String remarkID) {
        this.segmentNo = segmentNo;
        this.nonRefund = nonRefund;
        this.nonReroute = nonReroute;
        this.refundRemarkID = refundRemarkID;
        this.rerouteRemarkID = rerouteRemarkID;
        this.noShowRemarkID = noShowRemarkID;
        this.remarkID = remarkID;
    }

    public PenaltyRemarkType() {
    }

    @JsonProperty("SegmentNo")
    @XmlElement(name = "SegmentNo")
    private int segmentNo;

    @JsonProperty("NonRefund")
    @XmlElement(name = "NonRefund")
    private String nonRefund;

    @JsonProperty("NonReroute")
    @XmlElement(name = "NonReroute")
    private String nonReroute;

    @JsonProperty("RefundRemarkID")
    @XmlElement(name = "RefundRemarkID")
    private String refundRemarkID;

    @JsonProperty("RerouteRemarkID")
    @XmlElement(name = "RerouteRemarkID")
    private String rerouteRemarkID;

    @JsonProperty("NoShowRemarkID")
    @XmlElement(name = "NoShowRemarkID")
    private String noShowRemarkID;

    @JsonProperty("RemarkID")
    @XmlElement(name = "RemarkID")
    private String remarkID;

    public int getSegmentNo() {
        return this.segmentNo;
    }

    public void setSegmentNo(int segmentNo) {
        this.segmentNo = segmentNo;
    }

    public String getNonRefund() {
        return this.nonRefund;
    }

    public void setNonRefund(String nonRefund) {
        this.nonRefund = nonRefund;
    }

    public String getNonReroute() {
        return this.nonReroute;
    }

    public void setNonReroute(String nonReroute) {
        this.nonReroute = nonReroute;
    }

    public String getRefundRemarkID() {
        return this.refundRemarkID;
    }

    public void setRefundRemarkID(String refundRemarkID) {
        this.refundRemarkID = refundRemarkID;
    }

    public String getRerouteRemarkID() {
        return this.rerouteRemarkID;
    }

    public void setRerouteRemarkID(String rerouteRemarkID) {
        this.rerouteRemarkID = rerouteRemarkID;
    }

    public String getNoShowRemarkID() {
        return this.noShowRemarkID;
    }

    public void setNoShowRemarkID(String noShowRemarkID) {
        this.noShowRemarkID = noShowRemarkID;
    }

    public String getRemarkID() {
        return this.remarkID;
    }

    public void setRemarkID(String remarkID) {
        this.remarkID = remarkID;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (int) this.segmentNo;
            case 1: return (String) this.nonRefund;
            case 2: return (String) this.nonReroute;
            case 3: return (String) this.refundRemarkID;
            case 4: return (String) this.rerouteRemarkID;
            case 5: return (String) this.noShowRemarkID;
            case 6: return (String) this.remarkID;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.segmentNo = (int)fieldValue; break;
            case 1: this.nonRefund = (String)fieldValue; break;
            case 2: this.nonReroute = (String)fieldValue; break;
            case 3: this.refundRemarkID = (String)fieldValue; break;
            case 4: this.rerouteRemarkID = (String)fieldValue; break;
            case 5: this.noShowRemarkID = (String)fieldValue; break;
            case 6: this.remarkID = (String)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final PenaltyRemarkType other = (PenaltyRemarkType)obj;
        return
            Objects.equal(this.segmentNo, other.segmentNo) && 
            Objects.equal(this.nonRefund, other.nonRefund) && 
            Objects.equal(this.nonReroute, other.nonReroute) && 
            Objects.equal(this.refundRemarkID, other.refundRemarkID) && 
            Objects.equal(this.rerouteRemarkID, other.rerouteRemarkID) && 
            Objects.equal(this.noShowRemarkID, other.noShowRemarkID) && 
            Objects.equal(this.remarkID, other.remarkID);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.segmentNo);
        result = 31 * result + Objects.hashCode(this.nonRefund);
        result = 31 * result + Objects.hashCode(this.nonReroute);
        result = 31 * result + Objects.hashCode(this.refundRemarkID);
        result = 31 * result + Objects.hashCode(this.rerouteRemarkID);
        result = 31 * result + Objects.hashCode(this.noShowRemarkID);
        result = 31 * result + Objects.hashCode(this.remarkID);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("segmentNo", segmentNo)
            .add("nonRefund", nonRefund)
            .add("nonReroute", nonReroute)
            .add("refundRemarkID", refundRemarkID)
            .add("rerouteRemarkID", rerouteRemarkID)
            .add("noShowRemarkID", noShowRemarkID)
            .add("remarkID", remarkID)
            .toString();
    }
}