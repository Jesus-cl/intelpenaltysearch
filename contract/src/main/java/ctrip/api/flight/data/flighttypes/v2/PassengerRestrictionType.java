/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 乘客限制
 */
@DtoDoc("乘客限制")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PassengerRestrictionType", propOrder = {
    "minPassengerCount",
    "maxPassengerCount",
    "nationalityInclude",
    "nationalityExclude",
    "nationalityIncludeCN",
    "nationalityExcludeCN",
    "maxAgeLimitition",
    "minAgeLimitition"
})
@SuppressWarnings("all")
public class PassengerRestrictionType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"PassengerRestrictionType\",\"namespace\":\"" + PassengerRestrictionType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"minPassengerCount\",\"type\":\"int\"},{\"name\":\"maxPassengerCount\",\"type\":\"int\"},{\"name\":\"nationalityInclude\",\"type\":[\"string\",\"null\"]},{\"name\":\"nationalityExclude\",\"type\":[\"string\",\"null\"]},{\"name\":\"nationalityIncludeCN\",\"type\":[\"string\",\"null\"]},{\"name\":\"nationalityExcludeCN\",\"type\":[\"string\",\"null\"]},{\"name\":\"maxAgeLimitition\",\"type\":\"int\"},{\"name\":\"minAgeLimitition\",\"type\":\"int\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public PassengerRestrictionType(
        int minPassengerCount, 
        int maxPassengerCount, 
        String nationalityInclude, 
        String nationalityExclude, 
        String nationalityIncludeCN, 
        String nationalityExcludeCN, 
        int maxAgeLimitition, 
        int minAgeLimitition) {
        this.minPassengerCount = minPassengerCount;
        this.maxPassengerCount = maxPassengerCount;
        this.nationalityInclude = nationalityInclude;
        this.nationalityExclude = nationalityExclude;
        this.nationalityIncludeCN = nationalityIncludeCN;
        this.nationalityExcludeCN = nationalityExcludeCN;
        this.maxAgeLimitition = maxAgeLimitition;
        this.minAgeLimitition = minAgeLimitition;
    }

    public PassengerRestrictionType() {
    }

    @JsonProperty("MinPassengerCount")
    @XmlElement(name = "MinPassengerCount")
    private int minPassengerCount;

    @JsonProperty("MaxPassengerCount")
    @XmlElement(name = "MaxPassengerCount")
    private int maxPassengerCount;

    @JsonProperty("NationalityInclude")
    @XmlElement(name = "NationalityInclude")
    private String nationalityInclude;

    @JsonProperty("NationalityExclude")
    @XmlElement(name = "NationalityExclude")
    private String nationalityExclude;

    @JsonProperty("NationalityIncludeCN")
    @XmlElement(name = "NationalityIncludeCN")
    private String nationalityIncludeCN;

    @JsonProperty("NationalityExcludeCN")
    @XmlElement(name = "NationalityExcludeCN")
    private String nationalityExcludeCN;

    @JsonProperty("MaxAgeLimitition")
    @XmlElement(name = "MaxAgeLimitition")
    private int maxAgeLimitition;

    @JsonProperty("MinAgeLimitition")
    @XmlElement(name = "MinAgeLimitition")
    private int minAgeLimitition;

    public int getMinPassengerCount() {
        return this.minPassengerCount;
    }

    public void setMinPassengerCount(int minPassengerCount) {
        this.minPassengerCount = minPassengerCount;
    }

    public int getMaxPassengerCount() {
        return this.maxPassengerCount;
    }

    public void setMaxPassengerCount(int maxPassengerCount) {
        this.maxPassengerCount = maxPassengerCount;
    }

    public String getNationalityInclude() {
        return this.nationalityInclude;
    }

    public void setNationalityInclude(String nationalityInclude) {
        this.nationalityInclude = nationalityInclude;
    }

    public String getNationalityExclude() {
        return this.nationalityExclude;
    }

    public void setNationalityExclude(String nationalityExclude) {
        this.nationalityExclude = nationalityExclude;
    }

    public String getNationalityIncludeCN() {
        return this.nationalityIncludeCN;
    }

    public void setNationalityIncludeCN(String nationalityIncludeCN) {
        this.nationalityIncludeCN = nationalityIncludeCN;
    }

    public String getNationalityExcludeCN() {
        return this.nationalityExcludeCN;
    }

    public void setNationalityExcludeCN(String nationalityExcludeCN) {
        this.nationalityExcludeCN = nationalityExcludeCN;
    }

    public int getMaxAgeLimitition() {
        return this.maxAgeLimitition;
    }

    public void setMaxAgeLimitition(int maxAgeLimitition) {
        this.maxAgeLimitition = maxAgeLimitition;
    }

    public int getMinAgeLimitition() {
        return this.minAgeLimitition;
    }

    public void setMinAgeLimitition(int minAgeLimitition) {
        this.minAgeLimitition = minAgeLimitition;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (int) this.minPassengerCount;
            case 1: return (int) this.maxPassengerCount;
            case 2: return (String) this.nationalityInclude;
            case 3: return (String) this.nationalityExclude;
            case 4: return (String) this.nationalityIncludeCN;
            case 5: return (String) this.nationalityExcludeCN;
            case 6: return (int) this.maxAgeLimitition;
            case 7: return (int) this.minAgeLimitition;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.minPassengerCount = (int)fieldValue; break;
            case 1: this.maxPassengerCount = (int)fieldValue; break;
            case 2: this.nationalityInclude = (String)fieldValue; break;
            case 3: this.nationalityExclude = (String)fieldValue; break;
            case 4: this.nationalityIncludeCN = (String)fieldValue; break;
            case 5: this.nationalityExcludeCN = (String)fieldValue; break;
            case 6: this.maxAgeLimitition = (int)fieldValue; break;
            case 7: this.minAgeLimitition = (int)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final PassengerRestrictionType other = (PassengerRestrictionType)obj;
        return
            Objects.equal(this.minPassengerCount, other.minPassengerCount) && 
            Objects.equal(this.maxPassengerCount, other.maxPassengerCount) && 
            Objects.equal(this.nationalityInclude, other.nationalityInclude) && 
            Objects.equal(this.nationalityExclude, other.nationalityExclude) && 
            Objects.equal(this.nationalityIncludeCN, other.nationalityIncludeCN) && 
            Objects.equal(this.nationalityExcludeCN, other.nationalityExcludeCN) && 
            Objects.equal(this.maxAgeLimitition, other.maxAgeLimitition) && 
            Objects.equal(this.minAgeLimitition, other.minAgeLimitition);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.minPassengerCount);
        result = 31 * result + Objects.hashCode(this.maxPassengerCount);
        result = 31 * result + Objects.hashCode(this.nationalityInclude);
        result = 31 * result + Objects.hashCode(this.nationalityExclude);
        result = 31 * result + Objects.hashCode(this.nationalityIncludeCN);
        result = 31 * result + Objects.hashCode(this.nationalityExcludeCN);
        result = 31 * result + Objects.hashCode(this.maxAgeLimitition);
        result = 31 * result + Objects.hashCode(this.minAgeLimitition);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("minPassengerCount", minPassengerCount)
            .add("maxPassengerCount", maxPassengerCount)
            .add("nationalityInclude", nationalityInclude)
            .add("nationalityExclude", nationalityExclude)
            .add("nationalityIncludeCN", nationalityIncludeCN)
            .add("nationalityExcludeCN", nationalityExcludeCN)
            .add("maxAgeLimitition", maxAgeLimitition)
            .add("minAgeLimitition", minAgeLimitition)
            .toString();
    }
}