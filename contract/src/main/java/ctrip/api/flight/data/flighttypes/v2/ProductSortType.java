/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ProductSortType", propOrder = {
    "sortingField",
    "direction"
})
@SuppressWarnings("all")
public class ProductSortType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"ProductSortType\",\"namespace\":\"" + ProductSortType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"sortingField\",\"type\":[{\"type\":\"enum\",\"name\":\"ProductSortingFieldType\",\"namespace\":\"" + ProductSortingFieldType.class.getPackage().getName() + "\",\"symbols\":[\"Price\",\"DepartureTime\",\"ArrivalTime\",\"FlightDuration\"]},\"null\"]},{\"name\":\"direction\",\"type\":[{\"type\":\"enum\",\"name\":\"SortingDirectionType\",\"namespace\":\"" + SortingDirectionType.class.getPackage().getName() + "\",\"symbols\":[\"ASC\",\"DESC\"]},\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public ProductSortType(
        ProductSortingFieldType sortingField, 
        SortingDirectionType direction) {
        this.sortingField = sortingField;
        this.direction = direction;
    }

    public ProductSortType() {
    }

    @JsonProperty("SortingField")
    @XmlElement(name = "SortingField")
    private ProductSortingFieldType sortingField;

    @JsonProperty("Direction")
    @XmlElement(name = "Direction")
    private SortingDirectionType direction;

    public ProductSortingFieldType getSortingField() {
        return this.sortingField;
    }

    public void setSortingField(ProductSortingFieldType sortingField) {
        this.sortingField = sortingField;
    }

    public SortingDirectionType getDirection() {
        return this.direction;
    }

    public void setDirection(SortingDirectionType direction) {
        this.direction = direction;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (ProductSortingFieldType) this.sortingField;
            case 1: return (SortingDirectionType) this.direction;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.sortingField = (ProductSortingFieldType)fieldValue; break;
            case 1: this.direction = (SortingDirectionType)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final ProductSortType other = (ProductSortType)obj;
        return
            Objects.equal(this.sortingField, other.sortingField) && 
            Objects.equal(this.direction, other.direction);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.sortingField);
        result = 31 * result + Objects.hashCode(this.direction);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("sortingField", sortingField)
            .add("direction", direction)
            .toString();
    }
}