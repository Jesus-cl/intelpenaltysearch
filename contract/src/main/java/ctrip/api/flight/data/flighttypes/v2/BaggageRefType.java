/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 行李额
 */
@DtoDoc("行李额")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "BaggageRefType", propOrder = {
    "segmentNo",
    "baggageID",
    "travelerCategoryCode"
})
@SuppressWarnings("all")
public class BaggageRefType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"BaggageRefType\",\"namespace\":\"" + BaggageRefType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"segmentNo\",\"type\":\"int\"},{\"name\":\"baggageID\",\"type\":[\"string\",\"null\"]},{\"name\":\"travelerCategoryCode\",\"type\":[{\"type\":\"enum\",\"name\":\"TravelerCategoryCodeType\",\"namespace\":\"" + TravelerCategoryCodeType.class.getPackage().getName() + "\",\"symbols\":[\"Adult\",\"Child\",\"InfantInLap\",\"InfantInSeat\",\"Senior\"]},\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public BaggageRefType(
        int segmentNo, 
        String baggageID, 
        TravelerCategoryCodeType travelerCategoryCode) {
        this.segmentNo = segmentNo;
        this.baggageID = baggageID;
        this.travelerCategoryCode = travelerCategoryCode;
    }

    public BaggageRefType() {
    }

    @FieldDoc("用户航程序号（单程为1，往返程为1-2，联程类推）")
    @JsonProperty("SegmentNo")
    @XmlElement(name = "SegmentNo")
    private int segmentNo;

    @FieldDoc("行李额索引ID")
    @JsonProperty("BaggageID")
    @XmlElement(name = "BaggageID")
    private String baggageID;

    @FieldDoc("*乘客类型")
    @JsonProperty("TravelerCategoryCode")
    @XmlElement(name = "TravelerCategoryCode")
    private TravelerCategoryCodeType travelerCategoryCode;

    /**
     * 用户航程序号（单程为1，往返程为1-2，联程类推）
     */
    public int getSegmentNo() {
        return this.segmentNo;
    }

    public void setSegmentNo(int segmentNo) {
        this.segmentNo = segmentNo;
    }

    /**
     * 行李额索引ID
     */
    public String getBaggageID() {
        return this.baggageID;
    }

    public void setBaggageID(String baggageID) {
        this.baggageID = baggageID;
    }

    /**
     * *乘客类型
     */
    public TravelerCategoryCodeType getTravelerCategoryCode() {
        return this.travelerCategoryCode;
    }

    public void setTravelerCategoryCode(TravelerCategoryCodeType travelerCategoryCode) {
        this.travelerCategoryCode = travelerCategoryCode;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (int) this.segmentNo;
            case 1: return (String) this.baggageID;
            case 2: return (TravelerCategoryCodeType) this.travelerCategoryCode;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.segmentNo = (int)fieldValue; break;
            case 1: this.baggageID = (String)fieldValue; break;
            case 2: this.travelerCategoryCode = (TravelerCategoryCodeType)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final BaggageRefType other = (BaggageRefType)obj;
        return
            Objects.equal(this.segmentNo, other.segmentNo) && 
            Objects.equal(this.baggageID, other.baggageID) && 
            Objects.equal(this.travelerCategoryCode, other.travelerCategoryCode);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.segmentNo);
        result = 31 * result + Objects.hashCode(this.baggageID);
        result = 31 * result + Objects.hashCode(this.travelerCategoryCode);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("segmentNo", segmentNo)
            .add("baggageID", baggageID)
            .add("travelerCategoryCode", travelerCategoryCode)
            .toString();
    }
}