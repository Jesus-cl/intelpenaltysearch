/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlType;

/**
 * 行李额
 */
@DtoDoc("行李额")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "BaggageType", propOrder = {
    "baggageID",
    "baggageCN",
    "baggageEN",
    "baggageDetailList",
    "extentionFileds"
})
@SuppressWarnings("all")
public class BaggageType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"BaggageType\",\"namespace\":\"" + BaggageType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"baggageID\",\"type\":[\"string\",\"null\"]},{\"name\":\"baggageCN\",\"type\":[\"string\",\"null\"]},{\"name\":\"baggageEN\",\"type\":[\"string\",\"null\"]},{\"name\":\"baggageDetailList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BaggageDetailType\",\"namespace\":\"" + BaggageDetailType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"unit\",\"type\":[\"string\",\"null\"]},{\"name\":\"type\",\"type\":[\"string\",\"null\"]}]}}},{\"name\":\"extentionFileds\",\"type\":{\"type\":\"record\",\"name\":\"BaggageExtensionFiledsType\",\"namespace\":\"" + BaggageExtensionFiledsType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"containFreeBaggage\",\"type\":\"boolean\"}]}}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public BaggageType(
        String baggageID, 
        String baggageCN, 
        String baggageEN, 
        List<BaggageDetailType> baggageDetailList, 
        BaggageExtensionFiledsType extentionFileds) {
        this.baggageID = baggageID;
        this.baggageCN = baggageCN;
        this.baggageEN = baggageEN;
        this.baggageDetailList = baggageDetailList;
        this.extentionFileds = extentionFileds;
    }

    public BaggageType() {
    }

    @FieldDoc("行李额索引ID")
    @JsonProperty("BaggageID")
    @XmlElement(name = "BaggageID")
    private String baggageID;

    @FieldDoc("行李额中文信息")
    @JsonProperty("BaggageCN")
    @XmlElement(name = "BaggageCN")
    private String baggageCN;

    @FieldDoc("行李额英文信息")
    @JsonProperty("BaggageEN")
    @XmlElement(name = "BaggageEN")
    private String baggageEN;

    @FieldDoc("行李额详细数据")
    @JsonProperty("BaggageDetailList")
    @XmlElement(name = "BaggageDetail")
    @XmlElementWrapper(name = "BaggageDetailList")
    private List<BaggageDetailType> baggageDetailList;

    @FieldDoc("行李额扩展字段")
    @JsonProperty("ExtentionFileds")
    @XmlElement(name = "ExtentionFileds")
    private BaggageExtensionFiledsType extentionFileds;

    /**
     * 行李额索引ID
     */
    public String getBaggageID() {
        return this.baggageID;
    }

    public void setBaggageID(String baggageID) {
        this.baggageID = baggageID;
    }

    /**
     * 行李额中文信息
     */
    public String getBaggageCN() {
        return this.baggageCN;
    }

    public void setBaggageCN(String baggageCN) {
        this.baggageCN = baggageCN;
    }

    /**
     * 行李额英文信息
     */
    public String getBaggageEN() {
        return this.baggageEN;
    }

    public void setBaggageEN(String baggageEN) {
        this.baggageEN = baggageEN;
    }

    /**
     * 行李额详细数据
     */
    public List<BaggageDetailType> getBaggageDetailList() {
        return this.baggageDetailList;
    }

    public void setBaggageDetailList(List<BaggageDetailType> baggageDetailList) {
        this.baggageDetailList = baggageDetailList;
    }

    /**
     * 行李额扩展字段
     */
    public BaggageExtensionFiledsType getExtentionFileds() {
        return this.extentionFileds;
    }

    public void setExtentionFileds(BaggageExtensionFiledsType extentionFileds) {
        this.extentionFileds = extentionFileds;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.baggageID;
            case 1: return (String) this.baggageCN;
            case 2: return (String) this.baggageEN;
            case 3: return (List<BaggageDetailType>) this.baggageDetailList;
            case 4: return (BaggageExtensionFiledsType) this.extentionFileds;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.baggageID = (String)fieldValue; break;
            case 1: this.baggageCN = (String)fieldValue; break;
            case 2: this.baggageEN = (String)fieldValue; break;
            case 3: this.baggageDetailList = (List<BaggageDetailType>)fieldValue; break;
            case 4: this.extentionFileds = (BaggageExtensionFiledsType)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final BaggageType other = (BaggageType)obj;
        return
            Objects.equal(this.baggageID, other.baggageID) && 
            Objects.equal(this.baggageCN, other.baggageCN) && 
            Objects.equal(this.baggageEN, other.baggageEN) && 
            Objects.equal(this.baggageDetailList, other.baggageDetailList) && 
            Objects.equal(this.extentionFileds, other.extentionFileds);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.baggageID);
        result = 31 * result + Objects.hashCode(this.baggageCN);
        result = 31 * result + Objects.hashCode(this.baggageEN);
        result = 31 * result + Objects.hashCode(this.baggageDetailList);
        result = 31 * result + Objects.hashCode(this.extentionFileds);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("baggageID", baggageID)
            .add("baggageCN", baggageCN)
            .add("baggageEN", baggageEN)
            .add("baggageDetailList", baggageDetailList)
            .add("extentionFileds", extentionFileds)
            .toString();
    }
}