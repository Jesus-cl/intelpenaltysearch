/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TicketingTimeLimitType", propOrder = {
    "timeLimitType",
    "limitTime"
})
@SuppressWarnings("all")
public class TicketingTimeLimitType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"TicketingTimeLimitType\",\"namespace\":\"" + TicketingTimeLimitType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"timeLimitType\",\"type\":\"int\"},{\"name\":\"limitTime\",\"type\":\"int\"}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public TicketingTimeLimitType(
        int timeLimitType, 
        int limitTime) {
        this.timeLimitType = timeLimitType;
        this.limitTime = limitTime;
    }

    public TicketingTimeLimitType() {
    }

    @FieldDoc("出票保护时限类型，0:订单生成出票单后,1:航班起飞时间前")
    @JsonProperty("TimeLimitType")
    @XmlElement(name = "TimeLimitType")
    private int timeLimitType;

    @FieldDoc("出票保护时限，单位分钟")
    @JsonProperty("LimitTime")
    @XmlElement(name = "LimitTime")
    private int limitTime;

    /**
     * 出票保护时限类型，0:订单生成出票单后,1:航班起飞时间前
     */
    public int getTimeLimitType() {
        return this.timeLimitType;
    }

    public void setTimeLimitType(int timeLimitType) {
        this.timeLimitType = timeLimitType;
    }

    /**
     * 出票保护时限，单位分钟
     */
    public int getLimitTime() {
        return this.limitTime;
    }

    public void setLimitTime(int limitTime) {
        this.limitTime = limitTime;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (int) this.timeLimitType;
            case 1: return (int) this.limitTime;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.timeLimitType = (int)fieldValue; break;
            case 1: this.limitTime = (int)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final TicketingTimeLimitType other = (TicketingTimeLimitType)obj;
        return
            Objects.equal(this.timeLimitType, other.timeLimitType) && 
            Objects.equal(this.limitTime, other.limitTime);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.timeLimitType);
        result = 31 * result + Objects.hashCode(this.limitTime);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("timeLimitType", timeLimitType)
            .add("limitTime", limitTime)
            .toString();
    }
}