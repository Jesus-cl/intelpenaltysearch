/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package ctrip.api.flight.data.flighttypes.v2;

import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.schema.Field;
import com.ctriposs.baiji.schema.RecordSchema;
import com.ctriposs.baiji.schema.Schema;
import com.ctriposs.baiji.specific.SpecificRecord;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.util.Calendar;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 身份证件相关信息
 */
@DtoDoc("身份证件相关信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "IDCardInfoType", propOrder = {
    "idCardType",
    "idCardNo",
    "cardTimeLimit"
})
@SuppressWarnings("all")
public class IDCardInfoType implements SpecificRecord {

    private static final long serialVersionUID = 1L;

	public static final Schema SCHEMA = Schema.parse("{\"type\":\"record\",\"name\":\"IDCardInfoType\",\"namespace\":\"" + IDCardInfoType.class.getPackage().getName() + "\",\"fields\":[{\"name\":\"idCardType\",\"type\":[\"string\",\"null\"]},{\"name\":\"idCardNo\",\"type\":[\"string\",\"null\"]},{\"name\":\"cardTimeLimit\",\"type\":[\"datetime\",\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA; }

    public IDCardInfoType(
        String idCardType, 
        String idCardNo, 
        Calendar cardTimeLimit) {
        this.idCardType = idCardType;
        this.idCardNo = idCardNo;
        this.cardTimeLimit = cardTimeLimit;
    }

    public IDCardInfoType() {
    }

    @FieldDoc("*证件类型")
    @JsonProperty("IDCardType")
    @XmlElement(name = "IDCardType")
    private String idCardType;

    @FieldDoc("*证件号")
    @JsonProperty("IDCardNo")
    @XmlElement(name = "IDCardNo")
    private String idCardNo;

    @FieldDoc("证件有效期")
    @JsonProperty("CardTimeLimit")
    @XmlElement(name = "CardTimeLimit")
    private Calendar cardTimeLimit;

    /**
     * *证件类型
     */
    public String getIdCardType() {
        return this.idCardType;
    }

    public void setIdCardType(String idCardType) {
        this.idCardType = idCardType;
    }

    /**
     * *证件号
     */
    public String getIdCardNo() {
        return this.idCardNo;
    }

    public void setIdCardNo(String idCardNo) {
        this.idCardNo = idCardNo;
    }

    /**
     * 证件有效期
     */
    public Calendar getCardTimeLimit() {
        return this.cardTimeLimit;
    }

    public void setCardTimeLimit(Calendar cardTimeLimit) {
        this.cardTimeLimit = cardTimeLimit;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public Object get(int fieldPos) {
        switch(fieldPos) {
            case 0: return (String) this.idCardType;
            case 1: return (String) this.idCardNo;
            case 2: return (Calendar) this.cardTimeLimit;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.idCardType = (String)fieldValue; break;
            case 1: this.idCardNo = (String)fieldValue; break;
            case 2: this.cardTimeLimit = (Calendar)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public Object get(String fieldName) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return null;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        return field != null ? get(field.getPos()) : null;
    }

    @Override
    public void put(String fieldName, Object fieldValue) {
        Schema schema = getSchema();
        if (!(schema instanceof RecordSchema)) {
            return;
        }
        Field field = ((RecordSchema) schema).getField(fieldName);
        if (field != null) {
            put(field.getPos(), fieldValue);
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final IDCardInfoType other = (IDCardInfoType)obj;
        return
            Objects.equal(this.idCardType, other.idCardType) && 
            Objects.equal(this.idCardNo, other.idCardNo) && 
            Objects.equal(this.cardTimeLimit, other.cardTimeLimit);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.idCardType);
        result = 31 * result + Objects.hashCode(this.idCardNo);
        result = 31 * result + Objects.hashCode(this.cardTimeLimit);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("idCardType", idCardType)
            .add("idCardNo", idCardNo)
            .add("cardTimeLimit", cardTimeLimit)
            .toString();
    }
}